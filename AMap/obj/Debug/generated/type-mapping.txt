com/amap/api/fence/DistrictItem = Com.Amap.Api.Fence.DistrictItem
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  getAdcode()Ljava/lang/String; = Adcode
  setAdcode(Ljava/lang/String;)V = Adcode
  getCitycode()Ljava/lang/String; = Citycode
  setCitycode(Ljava/lang/String;)V = Citycode
  getCreator()Landroid/os/Parcelable$Creator; = Creator
  getDistrictName()Ljava/lang/String; = DistrictName
  setDistrictName(Ljava/lang/String;)V = DistrictName
  getPolyline()Ljava/util/List; = Polyline
  setPolyline(Ljava/util/List;)V = Polyline
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/fence/GeoFence = Com.Amap.Api.Fence.GeoFence
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  ADDGEOFENCE_SUCCESS = AddgeofenceSuccess
  BUNDLE_KEY_CUSTOMID = BundleKeyCustomid
  BUNDLE_KEY_FENCE = BundleKeyFence
  BUNDLE_KEY_FENCEID = BundleKeyFenceid
  BUNDLE_KEY_FENCESTATUS = BundleKeyFencestatus
  BUNDLE_KEY_LOCERRORCODE = BundleKeyLocerrorcode
  CREATOR = Creator
  ERROR_CODE_EXISTS = ErrorCodeExists
  ERROR_CODE_FAILURE_AUTH = ErrorCodeFailureAuth
  ERROR_CODE_FAILURE_CONNECTION = ErrorCodeFailureConnection
  ERROR_CODE_FAILURE_PARSER = ErrorCodeFailureParser
  ERROR_CODE_INVALID_PARAMETER = ErrorCodeInvalidParameter
  ERROR_CODE_UNKNOWN = ErrorCodeUnknown
  ERROR_NO_VALIDFENCE = ErrorNoValidfence
  STATUS_IN = StatusIn
  STATUS_LOCFAIL = StatusLocfail
  STATUS_OUT = StatusOut
  STATUS_STAYED = StatusStayed
  STATUS_UNKNOWN = StatusUnknown
  TYPE_AMAPPOI = TypeAmappoi
  TYPE_DISTRICT = TypeDistrict
  TYPE_POLYGON = TypePolygon
  TYPE_ROUND = TypeRound
  isAble()Z = Able
  setAble(Z)V = Able
  getActivatesAction()I = ActivatesAction
  setActivatesAction(I)V = ActivatesAction
  getCenter()Lcom/amap/api/location/DPoint; = Center
  setCenter(Lcom/amap/api/location/DPoint;)V = Center
  getCurrentLocation()Lcom/amap/api/location/AMapLocation; = CurrentLocation
  setCurrentLocation(Lcom/amap/api/location/AMapLocation;)V = CurrentLocation
  getCustomId()Ljava/lang/String; = CustomId
  setCustomId(Ljava/lang/String;)V = CustomId
  getDistrictItemList()Ljava/util/List; = DistrictItemList
  setDistrictItemList(Ljava/util/List;)V = DistrictItemList
  getEnterTime()J = EnterTime
  setEnterTime(J)V = EnterTime
  getExpiration()J = Expiration
  setExpiration(J)V = Expiration
  getFenceId()Ljava/lang/String; = FenceId
  setFenceId(Ljava/lang/String;)V = FenceId
  getMaxDis2Center()F = MaxDis2Center
  setMaxDis2Center(F)V = MaxDis2Center
  getMinDis2Center()F = MinDis2Center
  setMinDis2Center(F)V = MinDis2Center
  getPendingIntent()Landroid/app/PendingIntent; = PendingIntent
  setPendingIntent(Landroid/app/PendingIntent;)V = PendingIntent
  getPendingIntentAction()Ljava/lang/String; = PendingIntentAction
  setPendingIntentAction(Ljava/lang/String;)V = PendingIntentAction
  getPoiItem()Lcom/amap/api/fence/PoiItem; = PoiItem
  setPoiItem(Lcom/amap/api/fence/PoiItem;)V = PoiItem
  getPointList()Ljava/util/List; = PointList
  setPointList(Ljava/util/List;)V = PointList
  getRadius()F = Radius
  setRadius(F)V = Radius
  getStatus()I = Status
  setStatus(I)V = Status
  getType()I = Type
  setType(I)V = Type
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/fence/GeoFenceClient = Com.Amap.Api.Fence.GeoFenceClient
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  GEOFENCE_IN = GeofenceIn
  GEOFENCE_OUT = GeofenceOut
  GEOFENCE_STAYED = GeofenceStayed
  getAllGeoFence()Ljava/util/List; = AllGeoFence
  isPause()Z = IsPause
  addGeoFence(Lcom/amap/api/location/DPoint;FLjava/lang/String;)V = AddGeoFence(Com.Amap.Api.Location.DPoint, float, string)
  addGeoFence(Ljava/lang/String;Ljava/lang/String;)V = AddGeoFence(string, string)
  addGeoFence(Ljava/lang/String;Ljava/lang/String;Lcom/amap/api/location/DPoint;FILjava/lang/String;)V = AddGeoFence(string, string, Com.Amap.Api.Location.DPoint, float, int, string)
  addGeoFence(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V = AddGeoFence(string, string, string, int, string)
  addGeoFence(Ljava/util/List;Ljava/lang/String;)V = AddGeoFence(System.Collections.Generic.IList<Com.Amap.Api.Location.DPoint>, string)
  createPendingIntent(Ljava/lang/String;)Landroid/app/PendingIntent; = CreatePendingIntent(string)
  pauseGeoFence()V = PauseGeoFence()
  removeGeoFence()V = RemoveGeoFence()
  removeGeoFence(Lcom/amap/api/fence/GeoFence;)Z = RemoveGeoFence(Com.Amap.Api.Fence.GeoFence)
  resumeGeoFence()V = ResumeGeoFence()
  setActivateAction(I)V = SetActivateAction(int)
  setGeoFenceAble(Ljava/lang/String;Z)V = SetGeoFenceAble(string, bool)
  setGeoFenceListener(Lcom/amap/api/fence/GeoFenceListener;)V = SetGeoFenceListener(Com.Amap.Api.Fence.IGeoFenceListener)
com/amap/api/fence/GeoFenceListener = Com.Amap.Api.Fence.IGeoFenceListener
  onGeoFenceCreateFinished(Ljava/util/List;ILjava/lang/String;)V = OnGeoFenceCreateFinished(System.Collections.Generic.IList<Com.Amap.Api.Fence.GeoFence>, int, string)
com/amap/api/fence/GeoFenceManagerBase = Com.Amap.Api.Fence.IGeoFenceManagerBase
  getAllGeoFence()Ljava/util/List; = AllGeoFence
  isPause()Z = IsPause
  addDistrictGeoFence(Ljava/lang/String;Ljava/lang/String;)V = AddDistrictGeoFence(string, string)
  addKeywordGeoFence(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V = AddKeywordGeoFence(string, string, string, int, string)
  addNearbyGeoFence(Ljava/lang/String;Ljava/lang/String;Lcom/amap/api/location/DPoint;FILjava/lang/String;)V = AddNearbyGeoFence(string, string, Com.Amap.Api.Location.DPoint, float, int, string)
  addPolygonGeoFence(Ljava/util/List;Ljava/lang/String;)V = AddPolygonGeoFence(System.Collections.Generic.IList<Com.Amap.Api.Location.DPoint>, string)
  addRoundGeoFence(Lcom/amap/api/location/DPoint;FLjava/lang/String;)V = AddRoundGeoFence(Com.Amap.Api.Location.DPoint, float, string)
  createPendingIntent(Ljava/lang/String;)Landroid/app/PendingIntent; = CreatePendingIntent(string)
  pauseGeoFence()V = PauseGeoFence()
  removeGeoFence()V = RemoveGeoFence()
  removeGeoFence(Lcom/amap/api/fence/GeoFence;)Z = RemoveGeoFence(Com.Amap.Api.Fence.GeoFence)
  resumeGeoFence()V = ResumeGeoFence()
  setActivateAction(I)V = SetActivateAction(int)
  setGeoFenceAble(Ljava/lang/String;Z)V = SetGeoFenceAble(string, bool)
  setGeoFenceListener(Lcom/amap/api/fence/GeoFenceListener;)V = SetGeoFenceListener(Com.Amap.Api.Fence.IGeoFenceListener)
com/amap/api/fence/PoiItem = Com.Amap.Api.Fence.PoiItem
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  getAddress()Ljava/lang/String; = Address
  setAddress(Ljava/lang/String;)V = Address
  getAdname()Ljava/lang/String; = Adname
  setAdname(Ljava/lang/String;)V = Adname
  getCity()Ljava/lang/String; = City
  setCity(Ljava/lang/String;)V = City
  getCreator()Landroid/os/Parcelable$Creator; = Creator
  getLatitude()D = Latitude
  setLatitude(D)V = Latitude
  getLongitude()D = Longitude
  setLongitude(D)V = Longitude
  getPoiId()Ljava/lang/String; = PoiId
  setPoiId(Ljava/lang/String;)V = PoiId
  getPoiName()Ljava/lang/String; = PoiName
  setPoiName(Ljava/lang/String;)V = PoiName
  getPoiType()Ljava/lang/String; = PoiType
  setPoiType(Ljava/lang/String;)V = PoiType
  getProvince()Ljava/lang/String; = Province
  setProvince(Ljava/lang/String;)V = Province
  getTel()Ljava/lang/String; = Tel
  setTel(Ljava/lang/String;)V = Tel
  getTypeCode()Ljava/lang/String; = TypeCode
  setTypeCode(Ljava/lang/String;)V = TypeCode
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/interfaces/IAMap = Com.Amap.Api.Interfaces.IAMap
  getAMapProjection()Lcom/amap/api/maps2d/Projection; = AMapProjection
  getAMapUiSettings()Lcom/amap/api/maps2d/UiSettings; = AMapUiSettings
  getCameraPosition()Lcom/amap/api/maps2d/model/CameraPosition; = CameraPosition
  getLogoPosition()I = LogoPosition
  setLogoPosition(I)V = LogoPosition
  getMainHandler()Landroid/os/Handler; = MainHandler
  getMapBounds()Lcom/amap/api/maps2d/model/LatLngBounds; = MapBounds
  getMapHeight()I = MapHeight
  getMapScreenMarkers()Ljava/util/List; = MapScreenMarkers
  getMapType()I = MapType
  setMapType(I)V = MapType
  getMapWidth()I = MapWidth
  getMaxZoomLevel()F = MaxZoomLevel
  getMinZoomLevel()F = MinZoomLevel
  getMyLocation()Landroid/location/Location; = MyLocation
  isMyLocationEnabled()Z = MyLocationEnabled
  setMyLocationEnabled(Z)V = MyLocationEnabled
  getOnCameraChangeListener()Lcom/amap/api/maps2d/AMap$OnCameraChangeListener; = OnCameraChangeListener
  setOnCameraChangeListener(Lcom/amap/api/maps2d/AMap$OnCameraChangeListener;)V = OnCameraChangeListener
  getScalePerPixel()F = ScalePerPixel
  isTrafficEnabled()Z = TrafficEnabled
  setTrafficEnabled(Z)V = TrafficEnabled
  getView()Landroid/view/View; = View
  getZoomLevel()F = ZoomLevel
  addCircle(Lcom/amap/api/maps2d/model/CircleOptions;)Lcom/amap/api/maps2d/model/Circle; = AddCircle(Com.Amap.Api.Maps2d.Model.CircleOptions)
  addGroundOverlay(Lcom/amap/api/maps2d/model/GroundOverlayOptions;)Lcom/amap/api/maps2d/model/GroundOverlay; = AddGroundOverlay(Com.Amap.Api.Maps2d.Model.GroundOverlayOptions)
  addMarker(Lcom/amap/api/maps2d/model/MarkerOptions;)Lcom/amap/api/maps2d/model/Marker; = AddMarker(Com.Amap.Api.Maps2d.Model.MarkerOptions)
  addPolygon(Lcom/amap/api/maps2d/model/PolygonOptions;)Lcom/amap/api/maps2d/model/Polygon; = AddPolygon(Com.Amap.Api.Maps2d.Model.PolygonOptions)
  addPolyline(Lcom/amap/api/maps2d/model/PolylineOptions;)Lcom/amap/api/maps2d/model/Polyline; = AddPolyline(Com.Amap.Api.Maps2d.Model.PolylineOptions)
  addText(Lcom/amap/api/maps2d/model/TextOptions;)Lcom/amap/api/maps2d/model/Text; = AddText(Com.Amap.Api.Maps2d.Model.TextOptions)
  addTileOverlay(Lcom/amap/api/maps2d/model/TileOverlayOptions;)Lcom/amap/api/maps2d/model/TileOverlay; = AddTileOverlay(Com.Amap.Api.Maps2d.Model.TileOverlayOptions)
  AMapInvalidate()V = AMapInvalidate()
  animateCamera(Lcom/amap/api/maps2d/CameraUpdate;)V = AnimateCamera(Com.Amap.Api.Maps2d.CameraUpdate)
  animateCameraWithCallback(Lcom/amap/api/maps2d/CameraUpdate;Lcom/amap/api/maps2d/AMap$CancelableCallback;)V = AnimateCameraWithCallback(Com.Amap.Api.Maps2d.CameraUpdate, Com.Amap.Api.Maps2d.AMap.ICancelableCallback)
  animateCameraWithDurationAndCallback(Lcom/amap/api/maps2d/CameraUpdate;JLcom/amap/api/maps2d/AMap$CancelableCallback;)V = AnimateCameraWithDurationAndCallback(Com.Amap.Api.Maps2d.CameraUpdate, long, Com.Amap.Api.Maps2d.AMap.ICancelableCallback)
  clear()V = Clear()
  destroy()V = Destroy()
  getMapScreenShot(Lcom/amap/api/maps2d/AMap$OnMapScreenShotListener;)V = GetMapScreenShot(Com.Amap.Api.Maps2d.AMap.IOnMapScreenShotListener)
  moveCamera(Lcom/amap/api/maps2d/CameraUpdate;)V = MoveCamera(Com.Amap.Api.Maps2d.CameraUpdate)
  onPause()V = OnPause()
  onResume()V = OnResume()
  redrawInfoWindow()V = RedrawInfoWindow()
  removecache()V = Removecache()
  removecache(Lcom/amap/api/maps2d/AMap$OnCacheRemoveListener;)V = Removecache(Com.Amap.Api.Maps2d.AMap.IOnCacheRemoveListener)
  removeGLOverlay(Ljava/lang/String;)Z = RemoveGLOverlay(string)
  removeMarker(Ljava/lang/String;)Z = RemoveMarker(string)
  setInfoWindowAdapter(Lcom/amap/api/maps2d/AMap$InfoWindowAdapter;)V = SetInfoWindowAdapter(Com.Amap.Api.Maps2d.AMap.IInfoWindowAdapter)
  setLocationSource(Lcom/amap/api/maps2d/LocationSource;)V = SetLocationSource(Com.Amap.Api.Maps2d.ILocationSource)
  setMapLanguage(Ljava/lang/String;)V = SetMapLanguage(string)
  setMyLocationRotateAngle(F)V = SetMyLocationRotateAngle(float)
  setMyLocationStyle(Lcom/amap/api/maps2d/model/MyLocationStyle;)V = SetMyLocationStyle(Com.Amap.Api.Maps2d.Model.MyLocationStyle)
  setMyLocationType(I)V = SetMyLocationType(int)
  setOnInfoWindowClickListener(Lcom/amap/api/maps2d/AMap$OnInfoWindowClickListener;)V = SetOnInfoWindowClickListener(Com.Amap.Api.Maps2d.AMap.IOnInfoWindowClickListener)
  setOnMapClickListener(Lcom/amap/api/maps2d/AMap$OnMapClickListener;)V = SetOnMapClickListener(Com.Amap.Api.Maps2d.AMap.IOnMapClickListener)
  setOnMaploadedListener(Lcom/amap/api/maps2d/AMap$OnMapLoadedListener;)V = SetOnMaploadedListener(Com.Amap.Api.Maps2d.AMap.IOnMapLoadedListener)
  setOnMapLongClickListener(Lcom/amap/api/maps2d/AMap$OnMapLongClickListener;)V = SetOnMapLongClickListener(Com.Amap.Api.Maps2d.AMap.IOnMapLongClickListener)
  setOnMapTouchListener(Lcom/amap/api/maps2d/AMap$OnMapTouchListener;)V = SetOnMapTouchListener(Com.Amap.Api.Maps2d.AMap.IOnMapTouchListener)
  setOnMarkerClickListener(Lcom/amap/api/maps2d/AMap$OnMarkerClickListener;)V = SetOnMarkerClickListener(Com.Amap.Api.Maps2d.AMap.IOnMarkerClickListener)
  setOnMarkerDragListener(Lcom/amap/api/maps2d/AMap$OnMarkerDragListener;)V = SetOnMarkerDragListener(Com.Amap.Api.Maps2d.AMap.IOnMarkerDragListener)
  setOnMyLocationChangeListener(Lcom/amap/api/maps2d/AMap$OnMyLocationChangeListener;)V = SetOnMyLocationChangeListener(Com.Amap.Api.Maps2d.AMap.IOnMyLocationChangeListener)
  setZoomPosition(I)V = SetZoomPosition(int)
  setZOrderOnTop(Z)V = SetZOrderOnTop(bool)
  showCompassEnabled(Z)V = ShowCompassEnabled(bool)
  showMyLocationButtonEnabled(Z)V = ShowMyLocationButtonEnabled(bool)
  showMyLocationOverlay(Landroid/location/Location;)V = ShowMyLocationOverlay(Android.Locations.Location)
  showScaleEnabled(Z)V = ShowScaleEnabled(bool)
  showZoomControlsEnabled(Z)V = ShowZoomControlsEnabled(bool)
  stopAnimation()V = StopAnimation()
com/amap/api/interfaces/ICircle = Com.Amap.Api.Interfaces.ICircle
  getCenter()Lcom/amap/api/maps2d/model/LatLng; = Center
  setCenter(Lcom/amap/api/maps2d/model/LatLng;)V = Center
  getFillColor()I = FillColor
  setFillColor(I)V = FillColor
  getRadius()D = Radius
  setRadius(D)V = Radius
  getStrokeColor()I = StrokeColor
  setStrokeColor(I)V = StrokeColor
  getStrokeWidth()F = StrokeWidth
  setStrokeWidth(F)V = StrokeWidth
  contains(Lcom/amap/api/maps2d/model/LatLng;)Z = Contains(Com.Amap.Api.Maps2d.Model.LatLng)
com/amap/api/interfaces/IGroundOverlay = Com.Amap.Api.Interfaces.IGroundOverlay
  getBearing()F = Bearing
  setBearing(F)V = Bearing
  getBounds()Lcom/amap/api/maps2d/model/LatLngBounds; = Bounds
  getHeight()F = Height
  getPosition()Lcom/amap/api/maps2d/model/LatLng; = Position
  setPosition(Lcom/amap/api/maps2d/model/LatLng;)V = Position
  getTransparency()F = Transparency
  setTransparency(F)V = Transparency
  getWidth()F = Width
  setAnchor(FF)V = SetAnchor(float, float)
  setDimensions(F)V = SetDimensions(float)
  setDimensions(FF)V = SetDimensions(float, float)
  setImage(Lcom/amap/api/maps2d/model/BitmapDescriptor;)V = SetImage(Com.Amap.Api.Maps2d.Model.BitmapDescriptor)
  setPositionFromBounds(Lcom/amap/api/maps2d/model/LatLngBounds;)V = SetPositionFromBounds(Com.Amap.Api.Maps2d.Model.LatLngBounds)
com/amap/api/interfaces/IMapFragmentDelegate = Com.Amap.Api.Interfaces.IMapFragmentDelegate
  isReady()Z = IsReady
  getMap()Lcom/amap/api/interfaces/IAMap; = Map
  onCreate(Landroid/os/Bundle;)V = OnCreate(Android.OS.Bundle)
  onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View; = OnCreateView(Android.Views.LayoutInflater, Android.Views.ViewGroup, Android.OS.Bundle)
  onDestroy()V = OnDestroy()
  onDestroyView()V = OnDestroyView()
  onInflate(Landroid/app/Activity;Lcom/amap/api/maps2d/AMapOptions;Landroid/os/Bundle;)V = OnInflate(Android.App.Activity, Com.Amap.Api.Maps2d.AMapOptions, Android.OS.Bundle)
  onLowMemory()V = OnLowMemory()
  onPause()V = OnPause()
  onResume()V = OnResume()
  onSaveInstanceState(Landroid/os/Bundle;)V = OnSaveInstanceState(Android.OS.Bundle)
  setContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  setOptions(Lcom/amap/api/maps2d/AMapOptions;)V = SetOptions(Com.Amap.Api.Maps2d.AMapOptions)
com/amap/api/interfaces/IMarker = Com.Amap.Api.Interfaces.IMarker
  isDraggable()Z = Draggable
  setDraggable(Z)V = Draggable
  getHeight()I = Height
  getIcons()Ljava/util/ArrayList; = Icons
  setIcons(Ljava/util/ArrayList;)V = Icons
  getId()Ljava/lang/String; = Id
  isInfoWindowShown()Z = IsInfoWindowShown
  isViewMode()Z = IsViewMode
  getObject()Ljava/lang/Object; = Object
  setObject(Ljava/lang/Object;)V = Object
  getPeriod()I = Period
  setPeriod(I)V = Period
  getPosition()Lcom/amap/api/maps2d/model/LatLng; = Position
  setPosition(Lcom/amap/api/maps2d/model/LatLng;)V = Position
  getRealPosition()Lcom/amap/api/maps2d/model/LatLng; = RealPosition
  getSnippet()Ljava/lang/String; = Snippet
  setSnippet(Ljava/lang/String;)V = Snippet
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getWidth()I = Width
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  destroy()V = Destroy()
  equalsRemote(Lcom/amap/api/interfaces/IMarker;)Z = EqualsRemote(Com.Amap.Api.Interfaces.IMarker)
  hashCodeRemote()I = HashCodeRemote()
  hideInfoWindow()V = HideInfoWindow()
  remove()Z = Remove()
  setAnchor(FF)V = SetAnchor(float, float)
  setIcon(Lcom/amap/api/maps2d/model/BitmapDescriptor;)V = SetIcon(Com.Amap.Api.Maps2d.Model.BitmapDescriptor)
  setPositionByPixels(II)V = SetPositionByPixels(int, int)
  setRotateAngle(F)V = SetRotateAngle(float)
  showInfoWindow()V = ShowInfoWindow()
com/amap/api/interfaces/IOverlay = Com.Amap.Api.Interfaces.IOverlay
  getId()Ljava/lang/String; = Id
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  destroy()V = Destroy()
  equalsRemote(Lcom/amap/api/interfaces/IOverlay;)Z = EqualsRemote(Com.Amap.Api.Interfaces.IOverlay)
  hashCodeRemote()I = HashCodeRemote()
  remove()V = Remove()
com/amap/api/interfaces/IPolygon = Com.Amap.Api.Interfaces.IPolygon
  getFillColor()I = FillColor
  setFillColor(I)V = FillColor
  getPoints()Ljava/util/List; = Points
  setPoints(Ljava/util/List;)V = Points
  getStrokeColor()I = StrokeColor
  setStrokeColor(I)V = StrokeColor
  getStrokeWidth()F = StrokeWidth
  setStrokeWidth(F)V = StrokeWidth
  contains(Lcom/amap/api/maps2d/model/LatLng;)Z = Contains(Com.Amap.Api.Maps2d.Model.LatLng)
com/amap/api/interfaces/IPolyline = Com.Amap.Api.Interfaces.IPolyline
  getColor()I = Color
  setColor(I)V = Color
  isDottedLine()Z = DottedLine
  setDottedLine(Z)V = DottedLine
  isGeodesic()Z = Geodesic
  setGeodesic(Z)V = Geodesic
  getPoints()Ljava/util/List; = Points
  setPoints(Ljava/util/List;)V = Points
  getWidth()F = Width
  setWidth(F)V = Width
com/amap/api/interfaces/IProjection = Com.Amap.Api.Interfaces.IProjection
  getVisibleRegion()Lcom/amap/api/maps2d/model/VisibleRegion; = VisibleRegion
  fromScreenLocation(Landroid/graphics/Point;)Lcom/amap/api/maps2d/model/LatLng; = FromScreenLocation(Android.Graphics.Point)
  toMapLocation(Lcom/amap/api/maps2d/model/LatLng;)Landroid/graphics/PointF; = ToMapLocation(Com.Amap.Api.Maps2d.Model.LatLng)
  toScreenLocation(Lcom/amap/api/maps2d/model/LatLng;)Landroid/graphics/Point; = ToScreenLocation(Com.Amap.Api.Maps2d.Model.LatLng)
com/amap/api/interfaces/IText = Com.Amap.Api.Interfaces.IText
  getAddIndex()I = AddIndex
  setAddIndex(I)V = AddIndex
  getAlignX()I = AlignX
  getAlignY()I = AlignY
  getBackgroundColor()I = BackgroundColor
  setBackgroundColor(I)V = BackgroundColor
  getFonrColor()I = FonrColor
  getFontSize()I = FontSize
  setFontSize(I)V = FontSize
  getObject()Ljava/lang/Object; = Object
  setObject(Ljava/lang/Object;)V = Object
  getPosition()Lcom/amap/api/maps2d/model/LatLng; = Position
  setPosition(Lcom/amap/api/maps2d/model/LatLng;)V = Position
  getRotate()F = Rotate
  setRotate(F)V = Rotate
  getText()Ljava/lang/String; = Text
  setText(Ljava/lang/String;)V = Text
  getTypeface()Landroid/graphics/Typeface; = Typeface
  setTypeface(Landroid/graphics/Typeface;)V = Typeface
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  draw(Landroid/graphics/Canvas;)V = Draw(Android.Graphics.Canvas)
  remove()V = Remove()
  setAlign(II)V = SetAlign(int, int)
  setFontColor(I)V = SetFontColor(int)
com/amap/api/interfaces/ITileOverlay = Com.Amap.Api.Interfaces.ITileOverlay
  getId()Ljava/lang/String; = Id
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  clearTileCache()V = ClearTileCache()
  equalsRemote(Lcom/amap/api/interfaces/ITileOverlay;)Z = EqualsRemote(Com.Amap.Api.Interfaces.ITileOverlay)
  hashCodeRemote()I = HashCodeRemote()
  remove()V = Remove()
com/amap/api/interfaces/IUiSettings = Com.Amap.Api.Interfaces.IUiSettings
  isCompassEnabled()Z = CompassEnabled
  setCompassEnabled(Z)V = CompassEnabled
  getLogoPosition()I = LogoPosition
  setLogoPosition(I)V = LogoPosition
  isMyLocationButtonEnabled()Z = MyLocationButtonEnabled
  setMyLocationButtonEnabled(Z)V = MyLocationButtonEnabled
  isScaleControlsEnabled()Z = ScaleControlsEnabled
  setScaleControlsEnabled(Z)V = ScaleControlsEnabled
  isScrollGesturesEnabled()Z = ScrollGesturesEnabled
  setScrollGesturesEnabled(Z)V = ScrollGesturesEnabled
  isZoomControlsEnabled()Z = ZoomControlsEnabled
  setZoomControlsEnabled(Z)V = ZoomControlsEnabled
  isZoomGesturesEnabled()Z = ZoomGesturesEnabled
  setZoomGesturesEnabled(Z)V = ZoomGesturesEnabled
  isZoomInByScreenCenter()Z = ZoomInByScreenCenter
  setZoomInByScreenCenter(Z)V = ZoomInByScreenCenter
  getZoomPosition()I = ZoomPosition
  setZoomPosition(I)V = ZoomPosition
  setAllGesturesEnabled(Z)V = SetAllGesturesEnabled(bool)
com/amap/api/interfaces/MapCameraMessage = Com.Amap.Api.Interfaces.MapCameraMessage
  <init>()V = .ctor()
  amount = Amount
  bounds = Bounds
  cameraPosition = CameraPosition
  focus = Focus
  height = Height
  isChangeFinished = IsChangeFinished
  nowType = NowType
  padding = Padding
  width = Width
  xPixel = XPixel
  yPixel = YPixel
  zoom = Zoom
com/amap/api/location/AMapLocation = Com.Amap.Api.Location.AMapLocation
  <init>(Landroid/location/Location;)V = .ctor(Android.Locations.Location)
  <init>(Ljava/lang/String;)V = .ctor(string)
  a = A
  b = B
  COORD_TYPE_GCJ02 = CoordTypeGcj02
  COORD_TYPE_WGS84 = CoordTypeWgs84
  CREATOR = Creator
  ERROR_CODE_AIRPLANEMODE_WIFIOFF = ErrorCodeAirplanemodeWifioff
  ERROR_CODE_FAILURE_AUTH = ErrorCodeFailureAuth
  ERROR_CODE_FAILURE_CELL = ErrorCodeFailureCell
  ERROR_CODE_FAILURE_CONNECTION = ErrorCodeFailureConnection
  ERROR_CODE_FAILURE_INIT = ErrorCodeFailureInit
  ERROR_CODE_FAILURE_LOCATION = ErrorCodeFailureLocation
  ERROR_CODE_FAILURE_LOCATION_PARAMETER = ErrorCodeFailureLocationParameter
  ERROR_CODE_FAILURE_LOCATION_PERMISSION = ErrorCodeFailureLocationPermission
  ERROR_CODE_FAILURE_NOENOUGHSATELLITES = ErrorCodeFailureNoenoughsatellites
  ERROR_CODE_FAILURE_NOWIFIANDAP = ErrorCodeFailureNowifiandap
  ERROR_CODE_FAILURE_PARSER = ErrorCodeFailureParser
  ERROR_CODE_FAILURE_SIMULATION_LOCATION = ErrorCodeFailureSimulationLocation
  ERROR_CODE_FAILURE_WIFI_INFO = ErrorCodeFailureWifiInfo
  ERROR_CODE_INVALID_PARAMETER = ErrorCodeInvalidParameter
  ERROR_CODE_NOCGI_WIFIOFF = ErrorCodeNocgiWifioff
  ERROR_CODE_SERVICE_FAIL = ErrorCodeServiceFail
  ERROR_CODE_UNKNOWN = ErrorCodeUnknown
  GPS_ACCURACY_BAD = GpsAccuracyBad
  GPS_ACCURACY_GOOD = GpsAccuracyGood
  GPS_ACCURACY_UNKNOWN = GpsAccuracyUnknown
  LOCATION_SUCCESS = LocationSuccess
  LOCATION_TYPE_AMAP = LocationTypeAmap
  LOCATION_TYPE_CELL = LocationTypeCell
  LOCATION_TYPE_FAST = LocationTypeFast
  LOCATION_TYPE_FIX_CACHE = LocationTypeFixCache
  LOCATION_TYPE_GPS = LocationTypeGps
  LOCATION_TYPE_LAST_LOCATION_CACHE = LocationTypeLastLocationCache
  LOCATION_TYPE_OFFLINE = LocationTypeOffline
  LOCATION_TYPE_SAME_REQ = LocationTypeSameReq
  LOCATION_TYPE_WIFI = LocationTypeWifi
  TRUSTED_LEVEL_BAD = TrustedLevelBad
  TRUSTED_LEVEL_HIGH = TrustedLevelHigh
  TRUSTED_LEVEL_LOW = TrustedLevelLow
  TRUSTED_LEVEL_NORMAL = TrustedLevelNormal
  getAdCode()Ljava/lang/String; = AdCode
  setAdCode(Ljava/lang/String;)V = AdCode
  getAddress()Ljava/lang/String; = Address
  setAddress(Ljava/lang/String;)V = Address
  getAoiName()Ljava/lang/String; = AoiName
  setAoiName(Ljava/lang/String;)V = AoiName
  getBuildingId()Ljava/lang/String; = BuildingId
  setBuildingId(Ljava/lang/String;)V = BuildingId
  getCity()Ljava/lang/String; = City
  setCity(Ljava/lang/String;)V = City
  getCityCode()Ljava/lang/String; = CityCode
  setCityCode(Ljava/lang/String;)V = CityCode
  getConScenario()I = ConScenario
  setConScenario(I)V = ConScenario
  getCoordType()Ljava/lang/String; = CoordType
  setCoordType(Ljava/lang/String;)V = CoordType
  getCountry()Ljava/lang/String; = Country
  setCountry(Ljava/lang/String;)V = Country
  getDescription()Ljava/lang/String; = Description
  setDescription(Ljava/lang/String;)V = Description
  getDistrict()Ljava/lang/String; = District
  setDistrict(Ljava/lang/String;)V = District
  getErrorCode()I = ErrorCode
  setErrorCode(I)V = ErrorCode
  getErrorInfo()Ljava/lang/String; = ErrorInfo
  setErrorInfo(Ljava/lang/String;)V = ErrorInfo
  isFixLastLocation()Z = FixLastLocation
  setFixLastLocation(Z)V = FixLastLocation
  getFloor()Ljava/lang/String; = Floor
  setFloor(Ljava/lang/String;)V = Floor
  getGpsAccuracyStatus()I = GpsAccuracyStatus
  setGpsAccuracyStatus(I)V = GpsAccuracyStatus
  getLocationDetail()Ljava/lang/String; = LocationDetail
  setLocationDetail(Ljava/lang/String;)V = LocationDetail
  getLocationQualityReport()Lcom/amap/api/location/AMapLocationQualityReport; = LocationQualityReport
  setLocationQualityReport(Lcom/amap/api/location/AMapLocationQualityReport;)V = LocationQualityReport
  getLocationType()I = LocationType
  setLocationType(I)V = LocationType
  isMock()Z = Mock
  setMock(Z)V = Mock
  isOffset()Z = Offset
  setOffset(Z)V = Offset
  getPoiName()Ljava/lang/String; = PoiName
  setPoiName(Ljava/lang/String;)V = PoiName
  getProvince()Ljava/lang/String; = Province
  setProvince(Ljava/lang/String;)V = Province
  getRoad()Ljava/lang/String; = Road
  setRoad(Ljava/lang/String;)V = Road
  getSatellites()I = Satellites
  setSatellites(I)V = Satellites
  getStreet()Ljava/lang/String; = Street
  setStreet(Ljava/lang/String;)V = Street
  getStreetNum()Ljava/lang/String; = StreetNum
  getTrustedLevel()I = TrustedLevel
  setTrustedLevel(I)V = TrustedLevel
  clone()Lcom/amap/api/location/AMapLocation; = Clone()
  setNumber(Ljava/lang/String;)V = SetNumber(string)
  toJson(I)Lorg/json/JSONObject; = ToJson(int)
  toStr()Ljava/lang/String; = ToStr()
  toStr(I)Ljava/lang/String; = ToStr(int)
com/amap/api/location/AMapLocationClient = Com.Amap.Api.Location.AMapLocationClient
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/content/Intent;)V = .ctor(Android.Content.Context, Android.Content.Intent)
  isStarted()Z = IsStarted
  getLastKnownLocation()Lcom/amap/api/location/AMapLocation; = LastKnownLocation
  getVersion()Ljava/lang/String; = Version
  disableBackgroundLocation(Z)V = DisableBackgroundLocation(bool)
  enableBackgroundLocation(ILandroid/app/Notification;)V = EnableBackgroundLocation(int, Android.App.Notification)
  getDeviceId(Landroid/content/Context;)Ljava/lang/String; = GetDeviceId(Android.Content.Context)
  onDestroy()V = OnDestroy()
  setApiKey(Ljava/lang/String;)V = SetApiKey(string)
  setLocationListener(Lcom/amap/api/location/AMapLocationListener;)V = SetLocationListener(Com.Amap.Api.Location.IAMapLocationListener)
  setLocationOption(Lcom/amap/api/location/AMapLocationClientOption;)V = SetLocationOption(Com.Amap.Api.Location.AMapLocationClientOption)
  startAssistantLocation()V = StartAssistantLocation()
  startAssistantLocation(Landroid/webkit/WebView;)V = StartAssistantLocation(Android.Webkit.WebView)
  startLocation()V = StartLocation()
  stopAssistantLocation()V = StopAssistantLocation()
  stopLocation()V = StopLocation()
  unRegisterLocationListener(Lcom/amap/api/location/AMapLocationListener;)V = UnRegisterLocationListener(Com.Amap.Api.Location.IAMapLocationListener)
com/amap/api/location/AMapLocationClientOption = Com.Amap.Api.Location.AMapLocationClientOption
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  OPEN_ALWAYS_SCAN_WIFI = OpenAlwaysScanWifi
  SCAN_WIFI_INTERVAL = ScanWifiInterval
  getAPIKEY()Ljava/lang/String; = APIKEY
  getDeviceModeDistanceFilter()F = DeviceModeDistanceFilter
  isDownloadCoordinateConvertLibrary()Z = DownloadCoordinateConvertLibrary
  setDownloadCoordinateConvertLibrary(Z)V = DownloadCoordinateConvertLibrary
  getGpsFirstTimeout()J = GpsFirstTimeout
  getHttpTimeOut()J = HttpTimeOut
  getInterval()J = Interval
  isGpsFirst()Z = IsGpsFirst
  isKillProcess()Z = IsKillProcess
  isLocationCacheEnable()Z = IsLocationCacheEnable
  isMockEnable()Z = IsMockEnable
  isNeedAddress()Z = IsNeedAddress
  isOffset()Z = IsOffset
  isOnceLocation()Z = IsOnceLocation
  isOnceLocationLatest()Z = IsOnceLocationLatest
  isSensorEnable()Z = IsSensorEnable
  isWifiActiveScan()Z = IsWifiActiveScan
  isWifiScan()Z = IsWifiScan
  getLastLocationLifeCycle()J = LastLocationLifeCycle
  getLocationMode()Lcom/amap/api/location/AMapLocationClientOption$AMapLocationMode; = LocationMode
  getLocationProtocol()Lcom/amap/api/location/AMapLocationClientOption$AMapLocationProtocol; = LocationProtocol
  setLocationProtocol(Lcom/amap/api/location/AMapLocationClientOption$AMapLocationProtocol;)V = LocationProtocol
  getLocationPurpose()Lcom/amap/api/location/AMapLocationClientOption$AMapLocationPurpose; = LocationPurpose
  isOpenAlwaysScanWifi()Z = OpenAlwaysScanWifi
  setOpenAlwaysScanWifi(Z)V = OpenAlwaysScanWifi
  getScanWifiInterval()J = ScanWifiInterval
  setScanWifiInterval(J)V = ScanWifiInterval
  clone()Lcom/amap/api/location/AMapLocationClientOption; = Clone()
  describeContents()I = DescribeContents()
  getGeoLanguage()Lcom/amap/api/location/AMapLocationClientOption$GeoLanguage; = GetGeoLanguage()
  setDeviceModeDistanceFilter(F)Lcom/amap/api/location/AMapLocationClientOption; = SetDeviceModeDistanceFilter(float)
  setGeoLanguage(Lcom/amap/api/location/AMapLocationClientOption$GeoLanguage;)Lcom/amap/api/location/AMapLocationClientOption; = SetGeoLanguage(Com.Amap.Api.Location.AMapLocationClientOption.GeoLanguage)
  setGpsFirst(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetGpsFirst(bool)
  setGpsFirstTimeout(J)Lcom/amap/api/location/AMapLocationClientOption; = SetGpsFirstTimeout(long)
  setHttpTimeOut(J)Lcom/amap/api/location/AMapLocationClientOption; = SetHttpTimeOut(long)
  setInterval(J)Lcom/amap/api/location/AMapLocationClientOption; = SetInterval(long)
  setKillProcess(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetKillProcess(bool)
  setLastLocationLifeCycle(J)Lcom/amap/api/location/AMapLocationClientOption; = SetLastLocationLifeCycle(long)
  setLocationCacheEnable(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetLocationCacheEnable(bool)
  setLocationMode(Lcom/amap/api/location/AMapLocationClientOption$AMapLocationMode;)Lcom/amap/api/location/AMapLocationClientOption; = SetLocationMode(Com.Amap.Api.Location.AMapLocationClientOption.AMapLocationMode)
  setLocationPurpose(Lcom/amap/api/location/AMapLocationClientOption$AMapLocationPurpose;)Lcom/amap/api/location/AMapLocationClientOption; = SetLocationPurpose(Com.Amap.Api.Location.AMapLocationClientOption.AMapLocationPurpose)
  setMockEnable(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetMockEnable(bool)
  setNeedAddress(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetNeedAddress(bool)
  setOffset(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetOffset(bool)
  setOnceLocation(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetOnceLocation(bool)
  setOnceLocationLatest(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetOnceLocationLatest(bool)
  setSensorEnable(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetSensorEnable(bool)
  setWifiActiveScan(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetWifiActiveScan(bool)
  setWifiScan(Z)Lcom/amap/api/location/AMapLocationClientOption; = SetWifiScan(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/location/AMapLocationListener = Com.Amap.Api.Location.IAMapLocationListener
  onLocationChanged(Lcom/amap/api/location/AMapLocation;)V = OnLocationChanged(Com.Amap.Api.Location.AMapLocation)
com/amap/api/location/AMapLocationQualityReport = Com.Amap.Api.Location.AMapLocationQualityReport
  <init>()V = .ctor()
  GPS_STATUS_MODE_SAVING = GpsStatusModeSaving
  GPS_STATUS_NOGPSPERMISSION = GpsStatusNogpspermission
  GPS_STATUS_NOGPSPROVIDER = GpsStatusNogpsprovider
  GPS_STATUS_OFF = GpsStatusOff
  GPS_STATUS_OK = GpsStatusOk
  getAdviseMessage()Ljava/lang/String; = AdviseMessage
  getGPSSatellites()I = GPSSatellites
  setGPSSatellites(I)V = GPSSatellites
  getGPSStatus()I = GPSStatus
  isInstalledHighDangerMockApp()Z = IsInstalledHighDangerMockApp
  getNetUseTime()J = NetUseTime
  setNetUseTime(J)V = NetUseTime
  getNetworkType()Ljava/lang/String; = NetworkType
  setNetworkType(Ljava/lang/String;)V = NetworkType
  isWifiAble()Z = WifiAble
  setWifiAble(Z)V = WifiAble
  setGpsStatus(I)V = SetGpsStatus(int)
  setInstallHighDangerMockApp(Z)V = SetInstallHighDangerMockApp(bool)
  setLocationMode(Lcom/amap/api/location/AMapLocationClientOption$AMapLocationMode;)V = SetLocationMode(Com.Amap.Api.Location.AMapLocationClientOption.AMapLocationMode)
com/amap/api/location/APSService = Com.Amap.Api.Location.APSService
  <init>()V = .ctor()
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
com/amap/api/location/APSServiceBase = Com.Amap.Api.Location.IAPSServiceBase
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
  onCreate()V = OnCreate()
  onDestroy()V = OnDestroy()
  onStartCommand(Landroid/content/Intent;II)I = OnStartCommand(Android.Content.Intent, int, int)
com/amap/api/location/CoordinateConverter = Com.Amap.Api.Location.CoordinateConverter
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  calculateLineDistance(Lcom/amap/api/location/DPoint;Lcom/amap/api/location/DPoint;)F = CalculateLineDistance(Com.Amap.Api.Location.DPoint, Com.Amap.Api.Location.DPoint)
  convert()Lcom/amap/api/location/DPoint; = Convert()
  coord(Lcom/amap/api/location/DPoint;)Lcom/amap/api/location/CoordinateConverter; = Coord(Com.Amap.Api.Location.DPoint)
  from(Lcom/amap/api/location/CoordinateConverter$CoordType;)Lcom/amap/api/location/CoordinateConverter; = From(Com.Amap.Api.Location.CoordinateConverter.CoordType)
  isAMapDataAvailable(DD)Z = IsAMapDataAvailable(double, double)
com/amap/api/location/CoordUtil = Com.Amap.Api.Location.CoordUtil
  <init>()V = .ctor()
  isLoadedSo()Z = LoadedSo
  setLoadedSo(Z)V = LoadedSo
  convertToGcj([D[D)I = ConvertToGcj(double[], double[])
com/amap/api/location/DPoint = Com.Amap.Api.Location.DPoint
  <init>()V = .ctor()
  <init>(DD)V = .ctor(double, double)
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  getLatitude()D = Latitude
  setLatitude(D)V = Latitude
  getLongitude()D = Longitude
  setLongitude(D)V = Longitude
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/location/LocationManagerBase = Com.Amap.Api.Location.ILocationManagerBase
  isStarted()Z = IsStarted
  getLastKnownLocation()Lcom/amap/api/location/AMapLocation; = LastKnownLocation
  disableBackgroundLocation(Z)V = DisableBackgroundLocation(bool)
  enableBackgroundLocation(ILandroid/app/Notification;)V = EnableBackgroundLocation(int, Android.App.Notification)
  onDestroy()V = OnDestroy()
  setLocationListener(Lcom/amap/api/location/AMapLocationListener;)V = SetLocationListener(Com.Amap.Api.Location.IAMapLocationListener)
  setLocationOption(Lcom/amap/api/location/AMapLocationClientOption;)V = SetLocationOption(Com.Amap.Api.Location.AMapLocationClientOption)
  startAssistantLocation()V = StartAssistantLocation()
  startAssistantLocation(Landroid/webkit/WebView;)V = StartAssistantLocation(Android.Webkit.WebView)
  startLocation()V = StartLocation()
  stopAssistantLocation()V = StopAssistantLocation()
  stopLocation()V = StopLocation()
  unRegisterLocationListener(Lcom/amap/api/location/AMapLocationListener;)V = UnRegisterLocationListener(Com.Amap.Api.Location.IAMapLocationListener)
com/amap/api/location/UmidtokenInfo = Com.Amap.Api.Location.UmidtokenInfo
  <init>()V = .ctor()
  getUmidtoken()Ljava/lang/String; = Umidtoken
  setLocAble(Z)V = SetLocAble(bool)
  setUmidtoken(Landroid/content/Context;Ljava/lang/String;)V = SetUmidtoken(Android.Content.Context, string)
com/amap/api/maps2d/AMap = Com.Amap.Api.Maps2d.AMap
  <init>(Lcom/amap/api/interfaces/IAMap;)V = .ctor(Com.Amap.Api.Interfaces.IAMap)
  CHINESE = Chinese
  ENGLISH = English
  MAP_TYPE_NORMAL = MapTypeNormal
  MAP_TYPE_SATELLITE = MapTypeSatellite
  getCameraPosition()Lcom/amap/api/maps2d/model/CameraPosition; = CameraPosition
  getMapScreenMarkers()Ljava/util/List; = MapScreenMarkers
  getMapType()I = MapType
  setMapType(I)V = MapType
  getMaxZoomLevel()F = MaxZoomLevel
  getMinZoomLevel()F = MinZoomLevel
  getMyLocation()Landroid/location/Location; = MyLocation
  isMyLocationEnabled()Z = MyLocationEnabled
  setMyLocationEnabled(Z)V = MyLocationEnabled
  getProjection()Lcom/amap/api/maps2d/Projection; = Projection
  getScalePerPixel()F = ScalePerPixel
  isTrafficEnabled()Z = TrafficEnabled
  setTrafficEnabled(Z)V = TrafficEnabled
  getUiSettings()Lcom/amap/api/maps2d/UiSettings; = UiSettings
  getVersion()Ljava/lang/String; = Version
  addCircle(Lcom/amap/api/maps2d/model/CircleOptions;)Lcom/amap/api/maps2d/model/Circle; = AddCircle(Com.Amap.Api.Maps2d.Model.CircleOptions)
  addGroundOverlay(Lcom/amap/api/maps2d/model/GroundOverlayOptions;)Lcom/amap/api/maps2d/model/GroundOverlay; = AddGroundOverlay(Com.Amap.Api.Maps2d.Model.GroundOverlayOptions)
  addMarker(Lcom/amap/api/maps2d/model/MarkerOptions;)Lcom/amap/api/maps2d/model/Marker; = AddMarker(Com.Amap.Api.Maps2d.Model.MarkerOptions)
  addPolygon(Lcom/amap/api/maps2d/model/PolygonOptions;)Lcom/amap/api/maps2d/model/Polygon; = AddPolygon(Com.Amap.Api.Maps2d.Model.PolygonOptions)
  addPolyline(Lcom/amap/api/maps2d/model/PolylineOptions;)Lcom/amap/api/maps2d/model/Polyline; = AddPolyline(Com.Amap.Api.Maps2d.Model.PolylineOptions)
  addText(Lcom/amap/api/maps2d/model/TextOptions;)Lcom/amap/api/maps2d/model/Text; = AddText(Com.Amap.Api.Maps2d.Model.TextOptions)
  addTileOverlay(Lcom/amap/api/maps2d/model/TileOverlayOptions;)Lcom/amap/api/maps2d/model/TileOverlay; = AddTileOverlay(Com.Amap.Api.Maps2d.Model.TileOverlayOptions)
  animateCamera(Lcom/amap/api/maps2d/CameraUpdate;)V = AnimateCamera(Com.Amap.Api.Maps2d.CameraUpdate)
  animateCamera(Lcom/amap/api/maps2d/CameraUpdate;Lcom/amap/api/maps2d/AMap$CancelableCallback;)V = AnimateCamera(Com.Amap.Api.Maps2d.CameraUpdate, Com.Amap.Api.Maps2d.AMap.ICancelableCallback)
  animateCamera(Lcom/amap/api/maps2d/CameraUpdate;JLcom/amap/api/maps2d/AMap$CancelableCallback;)V = AnimateCamera(Com.Amap.Api.Maps2d.CameraUpdate, long, Com.Amap.Api.Maps2d.AMap.ICancelableCallback)
  clear()V = Clear()
  getMapScreenShot(Lcom/amap/api/maps2d/AMap$OnMapScreenShotListener;)V = GetMapScreenShot(Com.Amap.Api.Maps2d.AMap.IOnMapScreenShotListener)
  invalidate()V = Invalidate()
  moveCamera(Lcom/amap/api/maps2d/CameraUpdate;)V = MoveCamera(Com.Amap.Api.Maps2d.CameraUpdate)
  postInvalidate()V = PostInvalidate()
  removecache()V = Removecache()
  removecache(Lcom/amap/api/maps2d/AMap$OnCacheRemoveListener;)V = Removecache(Com.Amap.Api.Maps2d.AMap.IOnCacheRemoveListener)
  setInfoWindowAdapter(Lcom/amap/api/maps2d/AMap$InfoWindowAdapter;)V = SetInfoWindowAdapter(Com.Amap.Api.Maps2d.AMap.IInfoWindowAdapter)
  setLocationSource(Lcom/amap/api/maps2d/LocationSource;)V = SetLocationSource(Com.Amap.Api.Maps2d.ILocationSource)
  setMapLanguage(Ljava/lang/String;)V = SetMapLanguage(string)
  setMyLocationRotateAngle(F)V = SetMyLocationRotateAngle(float)
  setMyLocationStyle(Lcom/amap/api/maps2d/model/MyLocationStyle;)V = SetMyLocationStyle(Com.Amap.Api.Maps2d.Model.MyLocationStyle)
  setMyLocationType(I)V = SetMyLocationType(int)
  setOnCameraChangeListener(Lcom/amap/api/maps2d/AMap$OnCameraChangeListener;)V = SetOnCameraChangeListener(Com.Amap.Api.Maps2d.AMap.IOnCameraChangeListener)
  setOnInfoWindowClickListener(Lcom/amap/api/maps2d/AMap$OnInfoWindowClickListener;)V = SetOnInfoWindowClickListener(Com.Amap.Api.Maps2d.AMap.IOnInfoWindowClickListener)
  setOnMapClickListener(Lcom/amap/api/maps2d/AMap$OnMapClickListener;)V = SetOnMapClickListener(Com.Amap.Api.Maps2d.AMap.IOnMapClickListener)
  setOnMapLoadedListener(Lcom/amap/api/maps2d/AMap$OnMapLoadedListener;)V = SetOnMapLoadedListener(Com.Amap.Api.Maps2d.AMap.IOnMapLoadedListener)
  setOnMapLongClickListener(Lcom/amap/api/maps2d/AMap$OnMapLongClickListener;)V = SetOnMapLongClickListener(Com.Amap.Api.Maps2d.AMap.IOnMapLongClickListener)
  setOnMapTouchListener(Lcom/amap/api/maps2d/AMap$OnMapTouchListener;)V = SetOnMapTouchListener(Com.Amap.Api.Maps2d.AMap.IOnMapTouchListener)
  setOnMarkerClickListener(Lcom/amap/api/maps2d/AMap$OnMarkerClickListener;)V = SetOnMarkerClickListener(Com.Amap.Api.Maps2d.AMap.IOnMarkerClickListener)
  setOnMarkerDragListener(Lcom/amap/api/maps2d/AMap$OnMarkerDragListener;)V = SetOnMarkerDragListener(Com.Amap.Api.Maps2d.AMap.IOnMarkerDragListener)
  setOnMyLocationChangeListener(Lcom/amap/api/maps2d/AMap$OnMyLocationChangeListener;)V = SetOnMyLocationChangeListener(Com.Amap.Api.Maps2d.AMap.IOnMyLocationChangeListener)
  stopAnimation()V = StopAnimation()
com/amap/api/maps2d/AMapException = Com.Amap.Api.Maps2d.AMapException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  AMAP_NOT_SUPPORT = AmapNotSupport
  AMAP_NOT_SUPPORT_NAVI = AmapNotSupportNavi
  ERROR_CONNECTION = ErrorConnection
  ERROR_FAILURE_AUTH = ErrorFailureAuth
  ERROR_ILLEGAL_VALUE = ErrorIllegalValue
  ERROR_INVALID_PARAMETER = ErrorInvalidParameter
  ERROR_IO = ErrorIo
  ERROR_NULL_PARAMETER = ErrorNullParameter
  ERROR_PROTOCOL = ErrorProtocol
  ERROR_SOCKET = ErrorSocket
  ERROR_SOCKE_TIME_OUT = ErrorSockeTimeOut
  ERROR_UNKNOW_HOST = ErrorUnknowHost
  ERROR_UNKNOWN = ErrorUnknown
  ERROR_UNKNOW_SERVICE = ErrorUnknowService
  ERROR_URL = ErrorUrl
  ILLEGAL_AMAP_ARGUMENT = IllegalAmapArgument
  ILLEGAL_NAVI_ARGUMENT = IllegalNaviArgument
  getErrorMessage()Ljava/lang/String; = ErrorMessage
com/amap/api/maps2d/AMapOptions = Com.Amap.Api.Maps2d.AMapOptions
  <init>()V = .ctor()
  CREATOR = Creator
  LOGO_POSITION_BOTTOM_CENTER = LogoPositionBottomCenter
  LOGO_POSITION_BOTTOM_LEFT = LogoPositionBottomLeft
  LOGO_POSITION_BOTTOM_RIGHT = LogoPositionBottomRight
  ZOOM_POSITION_RIGHT_BUTTOM = ZoomPositionRightButtom
  ZOOM_POSITION_RIGHT_CENTER = ZoomPositionRightCenter
  getCamera()Lcom/amap/api/maps2d/model/CameraPosition; = Camera
  getCompassEnabled()Ljava/lang/Boolean; = CompassEnabled
  getLogoPosition()I = LogoPosition
  getMapType()I = MapType
  getScaleControlsEnabled()Ljava/lang/Boolean; = ScaleControlsEnabled
  getScrollGesturesEnabled()Ljava/lang/Boolean; = ScrollGesturesEnabled
  getZoomControlsEnabled()Ljava/lang/Boolean; = ZoomControlsEnabled
  getZoomGesturesEnabled()Ljava/lang/Boolean; = ZoomGesturesEnabled
  getZOrderOnTop()Ljava/lang/Boolean; = ZOrderOnTop
  describeContents()I = DescribeContents()
  camera(Lcom/amap/api/maps2d/model/CameraPosition;)Lcom/amap/api/maps2d/AMapOptions; = InvokeCamera(Com.Amap.Api.Maps2d.Model.CameraPosition)
  compassEnabled(Z)Lcom/amap/api/maps2d/AMapOptions; = InvokeCompassEnabled(bool)
  logoPosition(I)Lcom/amap/api/maps2d/AMapOptions; = InvokeLogoPosition(int)
  mapType(I)Lcom/amap/api/maps2d/AMapOptions; = InvokeMapType(int)
  scaleControlsEnabled(Z)Lcom/amap/api/maps2d/AMapOptions; = InvokeScaleControlsEnabled(bool)
  scrollGesturesEnabled(Z)Lcom/amap/api/maps2d/AMapOptions; = InvokeScrollGesturesEnabled(bool)
  zoomControlsEnabled(Z)Lcom/amap/api/maps2d/AMapOptions; = InvokeZoomControlsEnabled(bool)
  zoomGesturesEnabled(Z)Lcom/amap/api/maps2d/AMapOptions; = InvokeZoomGesturesEnabled(bool)
  zOrderOnTop(Z)Lcom/amap/api/maps2d/AMapOptions; = InvokeZOrderOnTop(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/AMapOptionsCreator = Com.Amap.Api.Maps2d.AMapOptionsCreator
  <init>()V = .ctor()
  createFromParcel(Landroid/os/Parcel;)Lcom/amap/api/maps2d/AMapOptions; = CreateFromParcel(Android.OS.Parcel)
  newArray(I)[Lcom/amap/api/maps2d/AMapOptions; = NewArray(int)
com/amap/api/maps2d/AMapUtils = Com.Amap.Api.Maps2d.AMapUtils
  <init>()V = .ctor()
  BUS_COMFORT = BusComfort
  BUS_MONEY_LITTLE = BusMoneyLittle
  BUS_NO_SUBWAY = BusNoSubway
  BUS_TIME_FIRST = BusTimeFirst
  BUS_TRANSFER_LITTLE = BusTransferLittle
  BUS_WALK_LITTLE = BusWalkLittle
  DRIVING_AVOID_CONGESTION = DrivingAvoidCongestion
  DRIVING_DEFAULT = DrivingDefault
  DRIVING_NO_HIGHWAY = DrivingNoHighway
  DRIVING_NO_HIGHWAY_AVOID_CONGESTION = DrivingNoHighwayAvoidCongestion
  DRIVING_NO_HIGHWAY_AVOID_SHORT_MONEY = DrivingNoHighwayAvoidShortMoney
  DRIVING_NO_HIGHWAY_SAVE_MONEY_AVOID_CONGESTION = DrivingNoHighwaySaveMoneyAvoidCongestion
  DRIVING_SAVE_MONEY = DrivingSaveMoney
  DRIVING_SAVE_MONEY_AVOID_CONGESTION = DrivingSaveMoneyAvoidCongestion
  DRIVING_SHORT_DISTANCE = DrivingShortDistance
  calculateArea(Lcom/amap/api/maps2d/model/LatLng;Lcom/amap/api/maps2d/model/LatLng;)F = CalculateArea(Com.Amap.Api.Maps2d.Model.LatLng, Com.Amap.Api.Maps2d.Model.LatLng)
  calculateLineDistance(Lcom/amap/api/maps2d/model/LatLng;Lcom/amap/api/maps2d/model/LatLng;)F = CalculateLineDistance(Com.Amap.Api.Maps2d.Model.LatLng, Com.Amap.Api.Maps2d.Model.LatLng)
  getLatestAMapApp(Landroid/content/Context;)V = GetLatestAMapApp(Android.Content.Context)
  openAMapDrivingRoute(Lcom/amap/api/maps2d/model/RoutePara;Landroid/content/Context;)V = OpenAMapDrivingRoute(Com.Amap.Api.Maps2d.Model.RoutePara, Android.Content.Context)
  openAMapNavi(Lcom/amap/api/maps2d/model/NaviPara;Landroid/content/Context;)V = OpenAMapNavi(Com.Amap.Api.Maps2d.Model.NaviPara, Android.Content.Context)
  openAMapPoiNearbySearch(Lcom/amap/api/maps2d/model/PoiPara;Landroid/content/Context;)V = OpenAMapPoiNearbySearch(Com.Amap.Api.Maps2d.Model.PoiPara, Android.Content.Context)
  openAMapTransitRoute(Lcom/amap/api/maps2d/model/RoutePara;Landroid/content/Context;)V = OpenAMapTransitRoute(Com.Amap.Api.Maps2d.Model.RoutePara, Android.Content.Context)
  openAMapWalkingRoute(Lcom/amap/api/maps2d/model/RoutePara;Landroid/content/Context;)V = OpenAMapWalkingRoute(Com.Amap.Api.Maps2d.Model.RoutePara, Android.Content.Context)
com/amap/api/maps2d/CameraUpdate = Com.Amap.Api.Maps2d.CameraUpdate
  <init>(Lcom/amap/api/interfaces/MapCameraMessage;)V = .ctor(Com.Amap.Api.Interfaces.MapCameraMessage)
  getCameraUpdateFactoryDelegate()Lcom/amap/api/interfaces/MapCameraMessage; = CameraUpdateFactoryDelegate
com/amap/api/maps2d/CameraUpdateFactory = Com.Amap.Api.Maps2d.CameraUpdateFactory
  <init>()V = .ctor()
  changeLatLng(Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/CameraUpdate; = ChangeLatLng(Com.Amap.Api.Maps2d.Model.LatLng)
  newCameraPosition(Lcom/amap/api/maps2d/model/CameraPosition;)Lcom/amap/api/maps2d/CameraUpdate; = NewCameraPosition(Com.Amap.Api.Maps2d.Model.CameraPosition)
  newLatLng(Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/CameraUpdate; = NewLatLng(Com.Amap.Api.Maps2d.Model.LatLng)
  newLatLngBounds(Lcom/amap/api/maps2d/model/LatLngBounds;I)Lcom/amap/api/maps2d/CameraUpdate; = NewLatLngBounds(Com.Amap.Api.Maps2d.Model.LatLngBounds, int)
  newLatLngBounds(Lcom/amap/api/maps2d/model/LatLngBounds;III)Lcom/amap/api/maps2d/CameraUpdate; = NewLatLngBounds(Com.Amap.Api.Maps2d.Model.LatLngBounds, int, int, int)
  newLatLngZoom(Lcom/amap/api/maps2d/model/LatLng;F)Lcom/amap/api/maps2d/CameraUpdate; = NewLatLngZoom(Com.Amap.Api.Maps2d.Model.LatLng, float)
  scrollBy(FF)Lcom/amap/api/maps2d/CameraUpdate; = ScrollBy(float, float)
  zoomBy(F)Lcom/amap/api/maps2d/CameraUpdate; = ZoomBy(float)
  zoomBy(FLandroid/graphics/Point;)Lcom/amap/api/maps2d/CameraUpdate; = ZoomBy(float, Android.Graphics.Point)
  zoomIn()Lcom/amap/api/maps2d/CameraUpdate; = ZoomIn()
  zoomOut()Lcom/amap/api/maps2d/CameraUpdate; = ZoomOut()
  zoomTo(F)Lcom/amap/api/maps2d/CameraUpdate; = ZoomTo(float)
com/amap/api/maps2d/CoordinateConverter = Com.Amap.Api.Maps2d.CoordinateConverter
  <init>()V = .ctor()
  convert()Lcom/amap/api/maps2d/model/LatLng; = Convert()
  coord(Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/CoordinateConverter; = Coord(Com.Amap.Api.Maps2d.Model.LatLng)
  from(Lcom/amap/api/maps2d/CoordinateConverter$CoordType;)Lcom/amap/api/maps2d/CoordinateConverter; = From(Com.Amap.Api.Maps2d.CoordinateConverter.CoordType)
  isAMapDataAvailable(DD)Z = IsAMapDataAvailable(double, double)
com/amap/api/maps2d/LocationSource = Com.Amap.Api.Maps2d.ILocationSource
  activate(Lcom/amap/api/maps2d/LocationSource$OnLocationChangedListener;)V = Activate(Com.Amap.Api.Maps2d.ILocationSourceOnLocationChangedListener)
  deactivate()V = Deactivate()
com/amap/api/maps2d/MapFragment = Com.Amap.Api.Maps2d.MapFragment
  <init>()V = .ctor()
  getMap()Lcom/amap/api/maps2d/AMap; = Map
  getMapFragmentDelegate()Lcom/amap/api/interfaces/IMapFragmentDelegate; = MapFragmentDelegate
  newInstance()Lcom/amap/api/maps2d/MapFragment; = NewInstance()
  newInstance(Lcom/amap/api/maps2d/AMapOptions;)Lcom/amap/api/maps2d/MapFragment; = NewInstance(Com.Amap.Api.Maps2d.AMapOptions)
com/amap/api/maps2d/MapsInitializer = Com.Amap.Api.Maps2d.MapsInitializer
  <init>()V = .ctor()
  sdcardDir = SdcardDir
  getNetworkEnable()Z = NetworkEnable
  setNetworkEnable(Z)V = NetworkEnable
  getUpdateDataActiveEnable()Z = UpdateDataActiveEnable
  setUpdateDataActiveEnable(Z)V = UpdateDataActiveEnable
  getVersion()Ljava/lang/String; = Version
  initialize(Landroid/content/Context;)V = Initialize(Android.Content.Context)
  loadWorldGridMap(Z)V = LoadWorldGridMap(bool)
  replaceURL(Ljava/lang/String;Ljava/lang/String;)V = ReplaceURL(string, string)
  setApiKey(Ljava/lang/String;)V = SetApiKey(string)
com/amap/api/maps2d/MapView = Com.Amap.Api.Maps2d.MapView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  <init>(Landroid/content/Context;Lcom/amap/api/maps2d/AMapOptions;)V = .ctor(Android.Content.Context, Com.Amap.Api.Maps2d.AMapOptions)
  getMap()Lcom/amap/api/maps2d/AMap; = Map
  getMapFragmentDelegate()Lcom/amap/api/interfaces/IMapFragmentDelegate; = MapFragmentDelegate
  onCreate(Landroid/os/Bundle;)V = OnCreate(Android.OS.Bundle)
  onDestroy()V = OnDestroy()
  onLowMemory()V = OnLowMemory()
  onPause()V = OnPause()
  onResume()V = OnResume()
  onSaveInstanceState(Landroid/os/Bundle;)V = OnSaveInstanceState(Android.OS.Bundle)
com/amap/api/maps2d/model/BitmapDescriptor = Com.Amap.Api.Maps2d.Model.BitmapDescriptor
  getBitmap()Landroid/graphics/Bitmap; = Bitmap
  getHeight()I = Height
  getWidth()I = Width
  clone()Lcom/amap/api/maps2d/model/BitmapDescriptor; = Clone()
  describeContents()I = DescribeContents()
  recycle()V = Recycle()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/BitmapDescriptorFactory = Com.Amap.Api.Maps2d.Model.BitmapDescriptorFactory
  <init>()V = .ctor()
  HUE_AZURE = HueAzure
  HUE_BLUE = HueBlue
  HUE_CYAN = HueCyan
  HUE_GREEN = HueGreen
  HUE_MAGENTA = HueMagenta
  HUE_ORANGE = HueOrange
  HUE_RED = HueRed
  HUE_ROSE = HueRose
  HUE_VIOLET = HueViolet
  HUE_YELLOW = HueYellow
  defaultMarker()Lcom/amap/api/maps2d/model/BitmapDescriptor; = DefaultMarker()
  defaultMarker(F)Lcom/amap/api/maps2d/model/BitmapDescriptor; = DefaultMarker(float)
  fromAsset(Ljava/lang/String;)Lcom/amap/api/maps2d/model/BitmapDescriptor; = FromAsset(string)
  fromBitmap(Landroid/graphics/Bitmap;)Lcom/amap/api/maps2d/model/BitmapDescriptor; = FromBitmap(Android.Graphics.Bitmap)
  fromFile(Ljava/lang/String;)Lcom/amap/api/maps2d/model/BitmapDescriptor; = FromFile(string)
  fromPath(Ljava/lang/String;)Lcom/amap/api/maps2d/model/BitmapDescriptor; = FromPath(string)
  fromResource(I)Lcom/amap/api/maps2d/model/BitmapDescriptor; = FromResource(int)
  fromView(Landroid/view/View;)Lcom/amap/api/maps2d/model/BitmapDescriptor; = FromView(Android.Views.View)
com/amap/api/maps2d/model/CameraPosition = Com.Amap.Api.Maps2d.Model.CameraPosition
  <init>(Lcom/amap/api/maps2d/model/LatLng;FFF)V = .ctor(Com.Amap.Api.Maps2d.Model.LatLng, float, float, float)
  bearing = Bearing
  isAbroad = IsAbroad
  target = Target
  tilt = Tilt
  zoom = Zoom
  describeContents()I = DescribeContents()
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  fromLatLngZoom(Lcom/amap/api/maps2d/model/LatLng;F)Lcom/amap/api/maps2d/model/CameraPosition; = FromLatLngZoom(Com.Amap.Api.Maps2d.Model.LatLng, float)
  hashCode()I = GetHashCode()
  builder()Lcom/amap/api/maps2d/model/CameraPosition$Builder; = InvokeBuilder()
  builder(Lcom/amap/api/maps2d/model/CameraPosition;)Lcom/amap/api/maps2d/model/CameraPosition$Builder; = InvokeBuilder(Com.Amap.Api.Maps2d.Model.CameraPosition)
  toString()Ljava/lang/String; = ToString()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/Circle = Com.Amap.Api.Maps2d.Model.Circle
  <init>(Lcom/amap/api/interfaces/ICircle;)V = .ctor(Com.Amap.Api.Interfaces.ICircle)
  getCenter()Lcom/amap/api/maps2d/model/LatLng; = Center
  setCenter(Lcom/amap/api/maps2d/model/LatLng;)V = Center
  getFillColor()I = FillColor
  setFillColor(I)V = FillColor
  getId()Ljava/lang/String; = Id
  getRadius()D = Radius
  setRadius(D)V = Radius
  getStrokeColor()I = StrokeColor
  setStrokeColor(I)V = StrokeColor
  getStrokeWidth()F = StrokeWidth
  setStrokeWidth(F)V = StrokeWidth
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  contains(Lcom/amap/api/maps2d/model/LatLng;)Z = Contains(Com.Amap.Api.Maps2d.Model.LatLng)
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  remove()V = Remove()
com/amap/api/maps2d/model/CircleOptions = Com.Amap.Api.Maps2d.Model.CircleOptions
  <init>()V = .ctor()
  getCenter()Lcom/amap/api/maps2d/model/LatLng; = Center
  getFillColor()I = FillColor
  isVisible()Z = IsVisible
  getRadius()D = Radius
  getStrokeColor()I = StrokeColor
  getStrokeWidth()F = StrokeWidth
  getZIndex()F = ZIndex
  describeContents()I = DescribeContents()
  center(Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/model/CircleOptions; = InvokeCenter(Com.Amap.Api.Maps2d.Model.LatLng)
  fillColor(I)Lcom/amap/api/maps2d/model/CircleOptions; = InvokeFillColor(int)
  radius(D)Lcom/amap/api/maps2d/model/CircleOptions; = InvokeRadius(double)
  strokeColor(I)Lcom/amap/api/maps2d/model/CircleOptions; = InvokeStrokeColor(int)
  strokeWidth(F)Lcom/amap/api/maps2d/model/CircleOptions; = InvokeStrokeWidth(float)
  zIndex(F)Lcom/amap/api/maps2d/model/CircleOptions; = InvokeZIndex(float)
  visible(Z)Lcom/amap/api/maps2d/model/CircleOptions; = Visible(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/GroundOverlay = Com.Amap.Api.Maps2d.Model.GroundOverlay
  getBearing()F = Bearing
  setBearing(F)V = Bearing
  getBounds()Lcom/amap/api/maps2d/model/LatLngBounds; = Bounds
  getHeight()F = Height
  getId()Ljava/lang/String; = Id
  getPosition()Lcom/amap/api/maps2d/model/LatLng; = Position
  setPosition(Lcom/amap/api/maps2d/model/LatLng;)V = Position
  getTransparency()F = Transparency
  setTransparency(F)V = Transparency
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getWidth()F = Width
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  remove()V = Remove()
  setDimensions(F)V = SetDimensions(float)
  setDimensions(FF)V = SetDimensions(float, float)
  setImage(Lcom/amap/api/maps2d/model/BitmapDescriptor;)V = SetImage(Com.Amap.Api.Maps2d.Model.BitmapDescriptor)
  setPositionFromBounds(Lcom/amap/api/maps2d/model/LatLngBounds;)V = SetPositionFromBounds(Com.Amap.Api.Maps2d.Model.LatLngBounds)
com/amap/api/maps2d/model/GroundOverlayOptions = Com.Amap.Api.Maps2d.Model.GroundOverlayOptions
  <init>()V = .ctor()
  NO_DIMENSION = NoDimension
  getAnchorU()F = AnchorU
  getAnchorV()F = AnchorV
  getBearing()F = Bearing
  getBounds()Lcom/amap/api/maps2d/model/LatLngBounds; = Bounds
  getHeight()F = Height
  getImage()Lcom/amap/api/maps2d/model/BitmapDescriptor; = Image
  isVisible()Z = IsVisible
  getLocation()Lcom/amap/api/maps2d/model/LatLng; = Location
  getTransparency()F = Transparency
  getWidth()F = Width
  getZIndex()F = ZIndex
  anchor(FF)Lcom/amap/api/maps2d/model/GroundOverlayOptions; = Anchor(float, float)
  describeContents()I = DescribeContents()
  bearing(F)Lcom/amap/api/maps2d/model/GroundOverlayOptions; = InvokeBearing(float)
  image(Lcom/amap/api/maps2d/model/BitmapDescriptor;)Lcom/amap/api/maps2d/model/GroundOverlayOptions; = InvokeImage(Com.Amap.Api.Maps2d.Model.BitmapDescriptor)
  transparency(F)Lcom/amap/api/maps2d/model/GroundOverlayOptions; = InvokeTransparency(float)
  zIndex(F)Lcom/amap/api/maps2d/model/GroundOverlayOptions; = InvokeZIndex(float)
  position(Lcom/amap/api/maps2d/model/LatLng;F)Lcom/amap/api/maps2d/model/GroundOverlayOptions; = Position(Com.Amap.Api.Maps2d.Model.LatLng, float)
  position(Lcom/amap/api/maps2d/model/LatLng;FF)Lcom/amap/api/maps2d/model/GroundOverlayOptions; = Position(Com.Amap.Api.Maps2d.Model.LatLng, float, float)
  positionFromBounds(Lcom/amap/api/maps2d/model/LatLngBounds;)Lcom/amap/api/maps2d/model/GroundOverlayOptions; = PositionFromBounds(Com.Amap.Api.Maps2d.Model.LatLngBounds)
  visible(Z)Lcom/amap/api/maps2d/model/GroundOverlayOptions; = Visible(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/LatLng = Com.Amap.Api.Maps2d.Model.LatLng
  <init>(DD)V = .ctor(double, double)
  latitude = Latitude
  longitude = Longitude
  clone()Lcom/amap/api/maps2d/model/LatLng; = Clone()
  describeContents()I = DescribeContents()
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  toString()Ljava/lang/String; = ToString()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/LatLngBounds = Com.Amap.Api.Maps2d.Model.LatLngBounds
  <init>(Lcom/amap/api/maps2d/model/LatLng;Lcom/amap/api/maps2d/model/LatLng;)V = .ctor(Com.Amap.Api.Maps2d.Model.LatLng, Com.Amap.Api.Maps2d.Model.LatLng)
  northeast = Northeast
  southwest = Southwest
  contains(Lcom/amap/api/maps2d/model/LatLng;)Z = Contains(Com.Amap.Api.Maps2d.Model.LatLng)
  contains(Lcom/amap/api/maps2d/model/LatLngBounds;)Z = Contains(Com.Amap.Api.Maps2d.Model.LatLngBounds)
  describeContents()I = DescribeContents()
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  including(Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/model/LatLngBounds; = Including(Com.Amap.Api.Maps2d.Model.LatLng)
  intersects(Lcom/amap/api/maps2d/model/LatLngBounds;)Z = Intersects(Com.Amap.Api.Maps2d.Model.LatLngBounds)
  builder()Lcom/amap/api/maps2d/model/LatLngBounds$Builder; = InvokeBuilder()
  toString()Ljava/lang/String; = ToString()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/Marker = Com.Amap.Api.Maps2d.Model.Marker
  <init>(Lcom/amap/api/interfaces/IMarker;)V = .ctor(Com.Amap.Api.Interfaces.IMarker)
  <init>(Lcom/amap/api/maps2d/model/MarkerOptions;)V = .ctor(Com.Amap.Api.Maps2d.Model.MarkerOptions)
  isDraggable()Z = Draggable
  setDraggable(Z)V = Draggable
  getIcons()Ljava/util/ArrayList; = Icons
  setIcons(Ljava/util/ArrayList;)V = Icons
  getId()Ljava/lang/String; = Id
  isInfoWindowShown()Z = IsInfoWindowShown
  getObject()Ljava/lang/Object; = Object
  setObject(Ljava/lang/Object;)V = Object
  getPeriod()I = Period
  setPeriod(I)V = Period
  getPosition()Lcom/amap/api/maps2d/model/LatLng; = Position
  setPosition(Lcom/amap/api/maps2d/model/LatLng;)V = Position
  getSnippet()Ljava/lang/String; = Snippet
  setSnippet(Ljava/lang/String;)V = Snippet
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  destroy()V = Destroy()
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  hideInfoWindow()V = HideInfoWindow()
  remove()V = Remove()
  setAnchor(FF)V = SetAnchor(float, float)
  setIcon(Lcom/amap/api/maps2d/model/BitmapDescriptor;)V = SetIcon(Com.Amap.Api.Maps2d.Model.BitmapDescriptor)
  setPositionByPixels(II)V = SetPositionByPixels(int, int)
  setRotateAngle(F)V = SetRotateAngle(float)
  showInfoWindow()V = ShowInfoWindow()
com/amap/api/maps2d/model/MarkerOptions = Com.Amap.Api.Maps2d.Model.MarkerOptions
  <init>()V = .ctor()
  getAnchorU()F = AnchorU
  getAnchorV()F = AnchorV
  getIcon()Lcom/amap/api/maps2d/model/BitmapDescriptor; = Icon
  getIcons()Ljava/util/ArrayList; = Icons
  isDraggable()Z = IsDraggable
  isGps()Z = IsGps
  isVisible()Z = IsVisible
  getPeriod()I = Period
  getPosition()Lcom/amap/api/maps2d/model/LatLng; = Position
  getSnippet()Ljava/lang/String; = Snippet
  getTitle()Ljava/lang/String; = Title
  getZIndex()F = ZIndex
  anchor(FF)Lcom/amap/api/maps2d/model/MarkerOptions; = Anchor(float, float)
  describeContents()I = DescribeContents()
  draggable(Z)Lcom/amap/api/maps2d/model/MarkerOptions; = Draggable(bool)
  icon(Lcom/amap/api/maps2d/model/BitmapDescriptor;)Lcom/amap/api/maps2d/model/MarkerOptions; = InvokeIcon(Com.Amap.Api.Maps2d.Model.BitmapDescriptor)
  icons(Ljava/util/ArrayList;)Lcom/amap/api/maps2d/model/MarkerOptions; = InvokeIcons(System.Collections.Generic.IList<Com.Amap.Api.Maps2d.Model.BitmapDescriptor>)
  period(I)Lcom/amap/api/maps2d/model/MarkerOptions; = InvokePeriod(int)
  position(Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/model/MarkerOptions; = InvokePosition(Com.Amap.Api.Maps2d.Model.LatLng)
  snippet(Ljava/lang/String;)Lcom/amap/api/maps2d/model/MarkerOptions; = InvokeSnippet(string)
  title(Ljava/lang/String;)Lcom/amap/api/maps2d/model/MarkerOptions; = InvokeTitle(string)
  zIndex(F)Lcom/amap/api/maps2d/model/MarkerOptions; = InvokeZIndex(float)
  setGps(Z)Lcom/amap/api/maps2d/model/MarkerOptions; = SetGps(bool)
  visible(Z)Lcom/amap/api/maps2d/model/MarkerOptions; = Visible(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/MyLocationStyle = Com.Amap.Api.Maps2d.Model.MyLocationStyle
  <init>()V = .ctor()
  CREATOR = Creator
  ERROR_CODE = ErrorCode
  ERROR_INFO = ErrorInfo
  LOCATION_TYPE = LocationType
  LOCATION_TYPE_FOLLOW = LocationTypeFollow
  LOCATION_TYPE_FOLLOW_NO_CENTER = LocationTypeFollowNoCenter
  LOCATION_TYPE_LOCATE = LocationTypeLocate
  LOCATION_TYPE_SHOW = LocationTypeShow
  getAnchorU()F = AnchorU
  getAnchorV()F = AnchorV
  getInterval()J = Interval
  isMyLocationShowing()Z = IsMyLocationShowing
  getMyLocationIcon()Lcom/amap/api/maps2d/model/BitmapDescriptor; = MyLocationIcon
  getMyLocationType()I = MyLocationType
  getRadiusFillColor()I = RadiusFillColor
  getStrokeColor()I = StrokeColor
  getStrokeWidth()F = StrokeWidth
  anchor(FF)Lcom/amap/api/maps2d/model/MyLocationStyle; = Anchor(float, float)
  describeContents()I = DescribeContents()
  interval(J)Lcom/amap/api/maps2d/model/MyLocationStyle; = InvokeInterval(long)
  myLocationIcon(Lcom/amap/api/maps2d/model/BitmapDescriptor;)Lcom/amap/api/maps2d/model/MyLocationStyle; = InvokeMyLocationIcon(Com.Amap.Api.Maps2d.Model.BitmapDescriptor)
  myLocationType(I)Lcom/amap/api/maps2d/model/MyLocationStyle; = InvokeMyLocationType(int)
  radiusFillColor(I)Lcom/amap/api/maps2d/model/MyLocationStyle; = InvokeRadiusFillColor(int)
  strokeColor(I)Lcom/amap/api/maps2d/model/MyLocationStyle; = InvokeStrokeColor(int)
  strokeWidth(F)Lcom/amap/api/maps2d/model/MyLocationStyle; = InvokeStrokeWidth(float)
  showMyLocation(Z)Lcom/amap/api/maps2d/model/MyLocationStyle; = ShowMyLocation(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/MyLocationStyleCreator = Com.Amap.Api.Maps2d.Model.MyLocationStyleCreator
  <init>()V = .ctor()
  createFromParcel(Landroid/os/Parcel;)Lcom/amap/api/maps2d/model/MyLocationStyle; = CreateFromParcel(Android.OS.Parcel)
  newArray(I)[Lcom/amap/api/maps2d/model/MyLocationStyle; = NewArray(int)
com/amap/api/maps2d/model/MyTrafficStyle = Com.Amap.Api.Maps2d.Model.MyTrafficStyle
  <init>()V = .ctor()
  getCongestedColor()I = CongestedColor
  setCongestedColor(I)V = CongestedColor
  getSeriousCongestedColor()I = SeriousCongestedColor
  setSeriousCongestedColor(I)V = SeriousCongestedColor
  getSlowColor()I = SlowColor
  setSlowColor(I)V = SlowColor
  getSmoothColor()I = SmoothColor
  setSmoothColor(I)V = SmoothColor
com/amap/api/maps2d/model/NaviPara = Com.Amap.Api.Maps2d.Model.NaviPara
  <init>()V = .ctor()
  DRIVING_AVOID_CONGESTION = DrivingAvoidCongestion
  DRIVING_DEFAULT = DrivingDefault
  DRIVING_NO_HIGHWAY = DrivingNoHighway
  DRIVING_NO_HIGHWAY_AVOID_CONGESTION = DrivingNoHighwayAvoidCongestion
  DRIVING_NO_HIGHWAY_AVOID_SHORT_MONEY = DrivingNoHighwayAvoidShortMoney
  DRIVING_NO_HIGHWAY_SAVE_MONEY_AVOID_CONGESTION = DrivingNoHighwaySaveMoneyAvoidCongestion
  DRIVING_SAVE_MONEY = DrivingSaveMoney
  DRIVING_SAVE_MONEY_AVOID_CONGESTION = DrivingSaveMoneyAvoidCongestion
  DRIVING_SHORT_DISTANCE = DrivingShortDistance
  getNaviStyle()I = NaviStyle
  setNaviStyle(I)V = NaviStyle
  getTargetPoint()Lcom/amap/api/maps2d/model/LatLng; = TargetPoint
  setTargetPoint(Lcom/amap/api/maps2d/model/LatLng;)V = TargetPoint
com/amap/api/maps2d/model/PoiPara = Com.Amap.Api.Maps2d.Model.PoiPara
  <init>()V = .ctor()
  getCenter()Lcom/amap/api/maps2d/model/LatLng; = Center
  setCenter(Lcom/amap/api/maps2d/model/LatLng;)V = Center
  getKeywords()Ljava/lang/String; = Keywords
  setKeywords(Ljava/lang/String;)V = Keywords
com/amap/api/maps2d/model/Polygon = Com.Amap.Api.Maps2d.Model.Polygon
  getFillColor()I = FillColor
  setFillColor(I)V = FillColor
  getId()Ljava/lang/String; = Id
  getPoints()Ljava/util/List; = Points
  setPoints(Ljava/util/List;)V = Points
  getStrokeColor()I = StrokeColor
  setStrokeColor(I)V = StrokeColor
  getStrokeWidth()F = StrokeWidth
  setStrokeWidth(F)V = StrokeWidth
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  contains(Lcom/amap/api/maps2d/model/LatLng;)Z = Contains(Com.Amap.Api.Maps2d.Model.LatLng)
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  remove()V = Remove()
com/amap/api/maps2d/model/PolygonOptions = Com.Amap.Api.Maps2d.Model.PolygonOptions
  <init>()V = .ctor()
  getFillColor()I = FillColor
  isVisible()Z = IsVisible
  getPoints()Ljava/util/List; = Points
  getStrokeColor()I = StrokeColor
  getStrokeWidth()F = StrokeWidth
  getZIndex()F = ZIndex
  add(Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/model/PolygonOptions; = Add(Com.Amap.Api.Maps2d.Model.LatLng)
  add([Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/model/PolygonOptions; = Add(params Com.Amap.Api.Maps2d.Model.LatLng[])
  addAll(Ljava/lang/Iterable;)Lcom/amap/api/maps2d/model/PolygonOptions; = AddAll(Java.Lang.IIterable)
  describeContents()I = DescribeContents()
  fillColor(I)Lcom/amap/api/maps2d/model/PolygonOptions; = InvokeFillColor(int)
  strokeColor(I)Lcom/amap/api/maps2d/model/PolygonOptions; = InvokeStrokeColor(int)
  strokeWidth(F)Lcom/amap/api/maps2d/model/PolygonOptions; = InvokeStrokeWidth(float)
  zIndex(F)Lcom/amap/api/maps2d/model/PolygonOptions; = InvokeZIndex(float)
  visible(Z)Lcom/amap/api/maps2d/model/PolygonOptions; = Visible(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/Polyline = Com.Amap.Api.Maps2d.Model.Polyline
  <init>(Lcom/amap/api/interfaces/IPolyline;)V = .ctor(Com.Amap.Api.Interfaces.IPolyline)
  getColor()I = Color
  setColor(I)V = Color
  isDottedLine()Z = DottedLine
  setDottedLine(Z)V = DottedLine
  isGeodesic()Z = Geodesic
  setGeodesic(Z)V = Geodesic
  getId()Ljava/lang/String; = Id
  getPoints()Ljava/util/List; = Points
  setPoints(Ljava/util/List;)V = Points
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getWidth()F = Width
  setWidth(F)V = Width
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  remove()V = Remove()
com/amap/api/maps2d/model/PolylineOptions = Com.Amap.Api.Maps2d.Model.PolylineOptions
  <init>()V = .ctor()
  getColor()I = Color
  isDottedLine()Z = IsDottedLine
  isGeodesic()Z = IsGeodesic
  isVisible()Z = IsVisible
  getPoints()Ljava/util/List; = Points
  getWidth()F = Width
  getZIndex()F = ZIndex
  add(Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/model/PolylineOptions; = Add(Com.Amap.Api.Maps2d.Model.LatLng)
  add([Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/model/PolylineOptions; = Add(params Com.Amap.Api.Maps2d.Model.LatLng[])
  addAll(Ljava/lang/Iterable;)Lcom/amap/api/maps2d/model/PolylineOptions; = AddAll(Java.Lang.IIterable)
  describeContents()I = DescribeContents()
  geodesic(Z)Lcom/amap/api/maps2d/model/PolylineOptions; = Geodesic(bool)
  color(I)Lcom/amap/api/maps2d/model/PolylineOptions; = InvokeColor(int)
  width(F)Lcom/amap/api/maps2d/model/PolylineOptions; = InvokeWidth(float)
  zIndex(F)Lcom/amap/api/maps2d/model/PolylineOptions; = InvokeZIndex(float)
  setDottedLine(Z)Lcom/amap/api/maps2d/model/PolylineOptions; = SetDottedLine(bool)
  visible(Z)Lcom/amap/api/maps2d/model/PolylineOptions; = Visible(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/RoutePara = Com.Amap.Api.Maps2d.Model.RoutePara
  <init>()V = .ctor()
  getDrivingRouteStyle()I = DrivingRouteStyle
  setDrivingRouteStyle(I)V = DrivingRouteStyle
  getEndName()Ljava/lang/String; = EndName
  setEndName(Ljava/lang/String;)V = EndName
  getEndPoint()Lcom/amap/api/maps2d/model/LatLng; = EndPoint
  setEndPoint(Lcom/amap/api/maps2d/model/LatLng;)V = EndPoint
  getStartName()Ljava/lang/String; = StartName
  setStartName(Ljava/lang/String;)V = StartName
  getStartPoint()Lcom/amap/api/maps2d/model/LatLng; = StartPoint
  setStartPoint(Lcom/amap/api/maps2d/model/LatLng;)V = StartPoint
  getTransitRouteStyle()I = TransitRouteStyle
  setTransitRouteStyle(I)V = TransitRouteStyle
com/amap/api/maps2d/model/RuntimeRemoteException = Com.Amap.Api.Maps2d.Model.RuntimeRemoteException
  <init>(Landroid/os/RemoteException;)V = .ctor(Android.OS.RemoteException)
  <init>(Ljava/lang/String;)V = .ctor(string)
com/amap/api/maps2d/model/Text = Com.Amap.Api.Maps2d.Model.Text
  ALIGN_BOTTOM = AlignBottom
  ALIGN_CENTER_HORIZONTAL = AlignCenterHorizontal
  ALIGN_CENTER_VERTICAL = AlignCenterVertical
  ALIGN_LEFT = AlignLeft
  ALIGN_RIGHT = AlignRight
  ALIGN_TOP = AlignTop
  getAlignX()I = AlignX
  getAlignY()I = AlignY
  getBackgroundColor()I = BackgroundColor
  setBackgroundColor(I)V = BackgroundColor
  getFontColor()I = FontColor
  setFontColor(I)V = FontColor
  getFontSize()I = FontSize
  setFontSize(I)V = FontSize
  getObject()Ljava/lang/Object; = Object
  setObject(Ljava/lang/Object;)V = Object
  getPosition()Lcom/amap/api/maps2d/model/LatLng; = Position
  setPosition(Lcom/amap/api/maps2d/model/LatLng;)V = Position
  getRotate()F = Rotate
  setRotate(F)V = Rotate
  getTypeface()Landroid/graphics/Typeface; = Typeface
  setTypeface(Landroid/graphics/Typeface;)V = Typeface
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  getText()Ljava/lang/String; = GetText()
  remove()V = Remove()
  setAlign(II)V = SetAlign(int, int)
  setText(Ljava/lang/String;)V = SetText(string)
com/amap/api/maps2d/model/TextOptions = Com.Amap.Api.Maps2d.Model.TextOptions
  <init>()V = .ctor()
  CREATOR = Creator
  getAlignX()I = AlignX
  getAlignY()I = AlignY
  getBackgroundColor()I = BackgroundColor
  getFontColor()I = FontColor
  getFontSize()I = FontSize
  isVisible()Z = IsVisible
  getObject()Ljava/lang/Object; = Object
  getPosition()Lcom/amap/api/maps2d/model/LatLng; = Position
  getRotate()F = Rotate
  getText()Ljava/lang/String; = Text
  getTypeface()Landroid/graphics/Typeface; = Typeface
  getZIndex()F = ZIndex
  align(II)Lcom/amap/api/maps2d/model/TextOptions; = Align(int, int)
  describeContents()I = DescribeContents()
  backgroundColor(I)Lcom/amap/api/maps2d/model/TextOptions; = InvokeBackgroundColor(int)
  fontColor(I)Lcom/amap/api/maps2d/model/TextOptions; = InvokeFontColor(int)
  fontSize(I)Lcom/amap/api/maps2d/model/TextOptions; = InvokeFontSize(int)
  position(Lcom/amap/api/maps2d/model/LatLng;)Lcom/amap/api/maps2d/model/TextOptions; = InvokePosition(Com.Amap.Api.Maps2d.Model.LatLng)
  rotate(F)Lcom/amap/api/maps2d/model/TextOptions; = InvokeRotate(float)
  text(Ljava/lang/String;)Lcom/amap/api/maps2d/model/TextOptions; = InvokeText(string)
  typeface(Landroid/graphics/Typeface;)Lcom/amap/api/maps2d/model/TextOptions; = InvokeTypeface(Android.Graphics.Typeface)
  zIndex(F)Lcom/amap/api/maps2d/model/TextOptions; = InvokeZIndex(float)
  setObject(Ljava/lang/Object;)Lcom/amap/api/maps2d/model/TextOptions; = SetObject(Java.Lang.Object)
  visible(Z)Lcom/amap/api/maps2d/model/TextOptions; = Visible(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/TextOptionsCreator = Com.Amap.Api.Maps2d.Model.TextOptionsCreator
  <init>()V = .ctor()
  createFromParcel(Landroid/os/Parcel;)Lcom/amap/api/maps2d/model/TextOptions; = CreateFromParcel(Android.OS.Parcel)
  newArray(I)[Lcom/amap/api/maps2d/model/TextOptions; = NewArray(int)
com/amap/api/maps2d/model/Tile = Com.Amap.Api.Maps2d.Model.Tile
  <init>(II[B)V = .ctor(int, int, byte[])
  data = Data
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/TileOverlay = Com.Amap.Api.Maps2d.Model.TileOverlay
  <init>(Lcom/amap/api/interfaces/ITileOverlay;)V = .ctor(Com.Amap.Api.Interfaces.ITileOverlay)
  getId()Ljava/lang/String; = Id
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getZIndex()F = ZIndex
  setZIndex(F)V = ZIndex
  clearTileCache()V = ClearTileCache()
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  remove()V = Remove()
com/amap/api/maps2d/model/TileOverlayOptions = Com.Amap.Api.Maps2d.Model.TileOverlayOptions
  <init>()V = .ctor()
  getDiskCacheDir()Ljava/lang/String; = DiskCacheDir
  getDiskCacheEnabled()Z = DiskCacheEnabled
  getDiskCacheSize()I = DiskCacheSize
  isVisible()Z = IsVisible
  getMemCacheSize()I = MemCacheSize
  getMemoryCacheEnabled()Z = MemoryCacheEnabled
  getTileProvider()Lcom/amap/api/maps2d/model/TileProvider; = TileProvider
  getZIndex()F = ZIndex
  describeContents()I = DescribeContents()
  diskCacheDir(Ljava/lang/String;)Lcom/amap/api/maps2d/model/TileOverlayOptions; = InvokeDiskCacheDir(string)
  diskCacheEnabled(Z)Lcom/amap/api/maps2d/model/TileOverlayOptions; = InvokeDiskCacheEnabled(bool)
  diskCacheSize(I)Lcom/amap/api/maps2d/model/TileOverlayOptions; = InvokeDiskCacheSize(int)
  memCacheSize(I)Lcom/amap/api/maps2d/model/TileOverlayOptions; = InvokeMemCacheSize(int)
  memoryCacheEnabled(Z)Lcom/amap/api/maps2d/model/TileOverlayOptions; = InvokeMemoryCacheEnabled(bool)
  tileProvider(Lcom/amap/api/maps2d/model/TileProvider;)Lcom/amap/api/maps2d/model/TileOverlayOptions; = InvokeTileProvider(Com.Amap.Api.Maps2d.Model.ITileProvider)
  zIndex(F)Lcom/amap/api/maps2d/model/TileOverlayOptions; = InvokeZIndex(float)
  visible(Z)Lcom/amap/api/maps2d/model/TileOverlayOptions; = Visible(bool)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/model/TileProvider = Com.Amap.Api.Maps2d.Model.ITileProvider
  NO_TILE = NoTile
  getTileHeight()I = TileHeight
  getTileWidth()I = TileWidth
  getTile(III)Lcom/amap/api/maps2d/model/Tile; = GetTile(int, int, int)
com/amap/api/maps2d/model/UrlTileProvider = Com.Amap.Api.Maps2d.Model.UrlTileProvider
  <init>(II)V = .ctor(int, int)
  getTileHeight()I = TileHeight
  getTileWidth()I = TileWidth
  getTile(III)Lcom/amap/api/maps2d/model/Tile; = GetTile(int, int, int)
  getTileUrl(III)Ljava/net/URL; = GetTileUrl(int, int, int)
com/amap/api/maps2d/model/VisibleRegion = Com.Amap.Api.Maps2d.Model.VisibleRegion
  <init>(Lcom/amap/api/maps2d/model/LatLng;Lcom/amap/api/maps2d/model/LatLng;Lcom/amap/api/maps2d/model/LatLng;Lcom/amap/api/maps2d/model/LatLng;Lcom/amap/api/maps2d/model/LatLngBounds;)V = .ctor(Com.Amap.Api.Maps2d.Model.LatLng, Com.Amap.Api.Maps2d.Model.LatLng, Com.Amap.Api.Maps2d.Model.LatLng, Com.Amap.Api.Maps2d.Model.LatLng, Com.Amap.Api.Maps2d.Model.LatLngBounds)
  farLeft = FarLeft
  farRight = FarRight
  latLngBounds = LatLngBounds
  nearLeft = NearLeft
  nearRight = NearRight
  describeContents()I = DescribeContents()
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  toString()Ljava/lang/String; = ToString()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/amap/api/maps2d/overlay/BusLineOverlay = Com.Amap.Api.Maps2d.Overlay.BusLineOverlay
  getBusBitmapDescriptor()Lcom/amap/api/maps2d/model/BitmapDescriptor; = BusBitmapDescriptor
  getBusColor()I = BusColor
  getBuslineWidth()F = BuslineWidth
  getEndBitmapDescriptor()Lcom/amap/api/maps2d/model/BitmapDescriptor; = EndBitmapDescriptor
  getStartBitmapDescriptor()Lcom/amap/api/maps2d/model/BitmapDescriptor; = StartBitmapDescriptor
  addToMap()V = AddToMap()
  getBusStationIndex(Lcom/amap/api/maps2d/model/Marker;)I = GetBusStationIndex(Com.Amap.Api.Maps2d.Model.Marker)
  getSnippet(I)Ljava/lang/String; = GetSnippet(int)
  getTitle(I)Ljava/lang/String; = GetTitle(int)
  removeFromMap()V = RemoveFromMap()
  zoomToSpan()V = ZoomToSpan()
com/amap/api/maps2d/overlay/PoiOverlay = Com.Amap.Api.Maps2d.Overlay.PoiOverlay
  addToMap()V = AddToMap()
  getBitmapDescriptor(I)Lcom/amap/api/maps2d/model/BitmapDescriptor; = GetBitmapDescriptor(int)
  getPoiIndex(Lcom/amap/api/maps2d/model/Marker;)I = GetPoiIndex(Com.Amap.Api.Maps2d.Model.Marker)
  getSnippet(I)Ljava/lang/String; = GetSnippet(int)
  getTitle(I)Ljava/lang/String; = GetTitle(int)
  removeFromMap()V = RemoveFromMap()
  zoomToSpan()V = ZoomToSpan()
com/amap/api/maps2d/Projection = Com.Amap.Api.Maps2d.Projection
  <init>(Lcom/amap/api/interfaces/IProjection;)V = .ctor(Com.Amap.Api.Interfaces.IProjection)
  getVisibleRegion()Lcom/amap/api/maps2d/model/VisibleRegion; = VisibleRegion
  fromScreenLocation(Landroid/graphics/Point;)Lcom/amap/api/maps2d/model/LatLng; = FromScreenLocation(Android.Graphics.Point)
  toMapLocation(Lcom/amap/api/maps2d/model/LatLng;)Landroid/graphics/PointF; = ToMapLocation(Com.Amap.Api.Maps2d.Model.LatLng)
  toScreenLocation(Lcom/amap/api/maps2d/model/LatLng;)Landroid/graphics/Point; = ToScreenLocation(Com.Amap.Api.Maps2d.Model.LatLng)
com/amap/api/maps2d/UiSettings = Com.Amap.Api.Maps2d.UiSettings
  <init>(Lcom/amap/api/interfaces/IUiSettings;)V = .ctor(Com.Amap.Api.Interfaces.IUiSettings)
  isCompassEnabled()Z = CompassEnabled
  setCompassEnabled(Z)V = CompassEnabled
  getLogoPosition()I = LogoPosition
  setLogoPosition(I)V = LogoPosition
  isMyLocationButtonEnabled()Z = MyLocationButtonEnabled
  setMyLocationButtonEnabled(Z)V = MyLocationButtonEnabled
  isScaleControlsEnabled()Z = ScaleControlsEnabled
  setScaleControlsEnabled(Z)V = ScaleControlsEnabled
  isScrollGesturesEnabled()Z = ScrollGesturesEnabled
  setScrollGesturesEnabled(Z)V = ScrollGesturesEnabled
  isZoomControlsEnabled()Z = ZoomControlsEnabled
  setZoomControlsEnabled(Z)V = ZoomControlsEnabled
  isZoomGesturesEnabled()Z = ZoomGesturesEnabled
  setZoomGesturesEnabled(Z)V = ZoomGesturesEnabled
  getZoomPosition()I = ZoomPosition
  setZoomPosition(I)V = ZoomPosition
  setAllGesturesEnabled(Z)V = SetAllGesturesEnabled(bool)
  setZoomInByScreenCenter(Z)V = SetZoomInByScreenCenter(bool)
com/autonavi/amap/mapcore2d/Inner_3dMap_location = Com.Autonavi.Amap.Mapcore2d.Inner_3dMap_location
  <init>(Landroid/location/Location;)V = .ctor(Android.Locations.Location)
  <init>(Ljava/lang/String;)V = .ctor(string)
  buildingId = BuildingId
  desc = Desc
  ERROR_CODE_FAILURE_AUTH = ErrorCodeFailureAuth
  ERROR_CODE_FAILURE_CELL = ErrorCodeFailureCell
  ERROR_CODE_FAILURE_CONNECTION = ErrorCodeFailureConnection
  ERROR_CODE_FAILURE_INIT = ErrorCodeFailureInit
  ERROR_CODE_FAILURE_LOCATION = ErrorCodeFailureLocation
  ERROR_CODE_FAILURE_LOCATION_PARAMETER = ErrorCodeFailureLocationParameter
  ERROR_CODE_FAILURE_LOCATION_PERMISSION = ErrorCodeFailureLocationPermission
  ERROR_CODE_FAILURE_NOENOUGHSATELLITES = ErrorCodeFailureNoenoughsatellites
  ERROR_CODE_FAILURE_NOWIFIANDAP = ErrorCodeFailureNowifiandap
  ERROR_CODE_FAILURE_PARSER = ErrorCodeFailureParser
  ERROR_CODE_FAILURE_SIMULATION_LOCATION = ErrorCodeFailureSimulationLocation
  ERROR_CODE_FAILURE_WIFI_INFO = ErrorCodeFailureWifiInfo
  ERROR_CODE_INVALID_PARAMETER = ErrorCodeInvalidParameter
  ERROR_CODE_SERVICE_FAIL = ErrorCodeServiceFail
  ERROR_CODE_UNKNOWN = ErrorCodeUnknown
  floor = Floor
  GPS_ACCURACY_BAD = GpsAccuracyBad
  GPS_ACCURACY_GOOD = GpsAccuracyGood
  GPS_ACCURACY_UNKNOWN = GpsAccuracyUnknown
  LOCATION_SUCCESS = LocationSuccess
  LOCATION_TYPE_AMAP = LocationTypeAmap
  LOCATION_TYPE_CELL = LocationTypeCell
  LOCATION_TYPE_FAST = LocationTypeFast
  LOCATION_TYPE_FIX_CACHE = LocationTypeFixCache
  LOCATION_TYPE_GPS = LocationTypeGps
  LOCATION_TYPE_OFFLINE = LocationTypeOffline
  LOCATION_TYPE_SAME_REQ = LocationTypeSameReq
  LOCATION_TYPE_WIFI = LocationTypeWifi
  getAdCode()Ljava/lang/String; = AdCode
  setAdCode(Ljava/lang/String;)V = AdCode
  getAddress()Ljava/lang/String; = Address
  setAddress(Ljava/lang/String;)V = Address
  getAoiName()Ljava/lang/String; = AoiName
  setAoiName(Ljava/lang/String;)V = AoiName
  getBuildingId()Ljava/lang/String; = BuildingId
  setBuildingId(Ljava/lang/String;)V = BuildingId
  getCity()Ljava/lang/String; = City
  setCity(Ljava/lang/String;)V = City
  getCityCode()Ljava/lang/String; = CityCode
  setCityCode(Ljava/lang/String;)V = CityCode
  getCountry()Ljava/lang/String; = Country
  setCountry(Ljava/lang/String;)V = Country
  getDistrict()Ljava/lang/String; = District
  setDistrict(Ljava/lang/String;)V = District
  getErrorCode()I = ErrorCode
  setErrorCode(I)V = ErrorCode
  getErrorInfo()Ljava/lang/String; = ErrorInfo
  setErrorInfo(Ljava/lang/String;)V = ErrorInfo
  getFloor()Ljava/lang/String; = Floor
  setFloor(Ljava/lang/String;)V = Floor
  getGpsAccuracyStatus()I = GpsAccuracyStatus
  setGpsAccuracyStatus(I)V = GpsAccuracyStatus
  getLocationDetail()Ljava/lang/String; = LocationDetail
  setLocationDetail(Ljava/lang/String;)V = LocationDetail
  getLocationType()I = LocationType
  setLocationType(I)V = LocationType
  isOffset()Z = Offset
  setOffset(Z)V = Offset
  getPoiName()Ljava/lang/String; = PoiName
  setPoiName(Ljava/lang/String;)V = PoiName
  getProvince()Ljava/lang/String; = Province
  setProvince(Ljava/lang/String;)V = Province
  getRoad()Ljava/lang/String; = Road
  setRoad(Ljava/lang/String;)V = Road
  getSatellites()I = Satellites
  setSatellites(I)V = Satellites
  getStreet()Ljava/lang/String; = Street
  setStreet(Ljava/lang/String;)V = Street
  getStreetNum()Ljava/lang/String; = StreetNum
  setNumber(Ljava/lang/String;)V = SetNumber(string)
  toJson(I)Lorg/json/JSONObject; = ToJson(int)
  toStr()Ljava/lang/String; = ToStr()
  toStr(I)Ljava/lang/String; = ToStr(int)
com/autonavi/amap/mapcore2d/Inner_3dMap_locationListener = Com.Autonavi.Amap.Mapcore2d.IInner_3dMap_locationListener
  onLocationChanged(Lcom/autonavi/amap/mapcore2d/Inner_3dMap_location;)V = OnLocationChanged(Com.Autonavi.Amap.Mapcore2d.Inner_3dMap_location)
com/autonavi/amap/mapcore2d/Inner_3dMap_locationManagerBase = Com.Autonavi.Amap.Mapcore2d.IInner_3dMap_locationManagerBase
  destroy()V = Destroy()
  setLocationListener(Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationListener;)V = SetLocationListener(Com.Autonavi.Amap.Mapcore2d.IInner_3dMap_locationListener)
  setLocationOption(Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption;)V = SetLocationOption(Com.Autonavi.Amap.Mapcore2d.Inner_3dMap_locationOption)
  startLocation()V = StartLocation()
  stopLocation()V = StopLocation()
  unRegisterLocationListener(Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationListener;)V = UnRegisterLocationListener(Com.Autonavi.Amap.Mapcore2d.IInner_3dMap_locationListener)
com/autonavi/amap/mapcore2d/Inner_3dMap_locationOption = Com.Autonavi.Amap.Mapcore2d.Inner_3dMap_locationOption
  <init>()V = .ctor()
  getAPIKEY()Ljava/lang/String; = APIKEY
  getHttpTimeOut()J = HttpTimeOut
  setHttpTimeOut(J)V = HttpTimeOut
  getInterval()J = Interval
  isGpsFirst()Z = IsGpsFirst
  isKillProcess()Z = IsKillProcess
  isNeedAddress()Z = IsNeedAddress
  isOffset()Z = IsOffset
  isOnceLocation()Z = IsOnceLocation
  isLocationCacheEnable()Z = LocationCacheEnable
  setLocationCacheEnable(Z)V = LocationCacheEnable
  getLocationMode()Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption$Inner_3dMap_Enum_LocationMode; = LocationMode
  getLocationProtocol()Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption$Inner_3dMap_Enum_LocationProtocol; = LocationProtocol
  setLocationProtocol(Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption$Inner_3dMap_Enum_LocationProtocol;)V = LocationProtocol
  isMockEnable()Z = MockEnable
  setMockEnable(Z)V = MockEnable
  isOnceLocationLatest()Z = OnceLocationLatest
  setOnceLocationLatest(Z)V = OnceLocationLatest
  isSensorEnable()Z = SensorEnable
  setSensorEnable(Z)V = SensorEnable
  isWifiActiveScan()Z = WifiActiveScan
  setWifiActiveScan(Z)V = WifiActiveScan
  isWifiScan()Z = WifiScan
  setWifiScan(Z)V = WifiScan
  clone()Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption; = Clone()
  setGpsFirst(Z)Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption; = SetGpsFirst(bool)
  setInterval(J)Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption; = SetInterval(long)
  setKillProcess(Z)Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption; = SetKillProcess(bool)
  setLocationMode(Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption$Inner_3dMap_Enum_LocationMode;)Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption; = SetLocationMode(Com.Autonavi.Amap.Mapcore2d.Inner_3dMap_locationOption.Inner_3dMap_Enum_LocationMode)
  setNeedAddress(Z)Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption; = SetNeedAddress(bool)
  setOffset(Z)Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption; = SetOffset(bool)
  setOnceLocation(Z)Lcom/autonavi/amap/mapcore2d/Inner_3dMap_locationOption; = SetOnceLocation(bool)
